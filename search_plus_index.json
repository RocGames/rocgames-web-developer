{"./":{"url":"./","title":"概览","keywords":"","body":" [!TIP|style:flat|icon:'fa fa-info-circle'|labelVisibility:hidden|iconVisibility:hidden] RocGames 开发者服务 ( RocGames Developer Services ) 简称 RDS 服务 旨在帮助开发者降低游戏研发、运营维护等阶段投入的精力和成本。 RDS 整合了各项服务，让开发者能够聚焦在游戏核心乐趣的创造上，创作更优秀的游戏，进而促进游戏行业生态的良性循环，最终让开发者与玩家双双受益。 服务列表 [!WARNING|label:Tips] RDS 提供以下服务，开发者可以通过在游戏中集成 SDK 来开启使用： 登录：玩家可以通过 RDS 授权快速开始游戏。帮助开发者低成本地构建一个安全可靠的玩家登录系统，支持玩家采用包括游客账号、第三方账号（Yeeha、Apple、微信、QQ 等）在内的多种账号来登录你的游戏。 支付：提供主流支付方式，玩家可以通过 RDS 授权快速完成游戏内道具购买与流通。 好友：玩家通过 RDS 账号登录后，可以获取玩同一款游戏的 RDS 互关好友列表。为游戏开发者提供完整的添加、删除、查找好友的功能接口，帮助游戏快速形成社交网络。 成就：可以在游戏中设置「普通成就」和「白金成就」，增加玩家在游戏中的参与度，鼓励玩家以不同的玩法来玩游戏。 排行：基于内建账户系统在游戏中设立排行榜功能，可以推动玩家之间的趣味性竞争，从而帮助提升游戏的玩家活跃度。 实时语音：一站式语音解决方案，提供实时语音、语音合规服务，覆盖 FPS、MOBA、MMORPG、休闲对战、线上桌游等多种游戏玩法类型。 即时通讯：解决产品内即时通信、实时数据同步等需求。 推送通知：整合了 Android 推送、iOS 推送的统一推送服务。 公告系统：开发者在开发者中心发布编辑公告内容，玩家在打开游戏时可以收到公告通知。 数据分析：提供了一套专注于解决游戏项目数据需求的分析工具，通过简单的接入就可以获得丰富实用的数据看板和广告追踪能力，让数据分析和广告投放变得轻松易操作，同时也可以用于分析人群画像，帮助开发者更好地理解用户。 [!DANGER|label:声明] RDS 提供的服务均不可用于所在地区法律以外的目的 [!NOTE|style:flat|icon:'fa fa-info-circle'|labelVisibility:hidden|iconVisibility:hidden] 使用对应的服务请先完成开发者注册，之后登录开发者中心开启「游戏服务」。 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/get-ready.html":{"url":"started/get-ready.html","title":"准备工作","keywords":"","body":" [!NOTE|labelVisibility:hidden|iconVisibility:hidden] 为了能使用 RocGames （ RocGames Developer Services，简称 RDS 服务 ），你需要完成前期的配置工作。 创建应用 [!WARNING|label:暂不支持在线开通游戏服务] 在使用 RDS 服务之前，你需要创建一个应用，来完成对接前的准备工作。 创建应用请联系相关 商务 与 运营人员。 配置应用 依次进入 开发者中心 > 你的游戏 > 游戏服务 > 应用配置，点击「立即开启」，获得当前应用的基本信息。 基本信息 Client ID 是一个应用实体包在 RocGames 开发者中心的唯一身份标识， RocGames 通过 Client ID 来鉴别应用的身份。每个应用仅能拥有一个 Client ID，如同一个应用区分测试服与正式服，需要创建两个不同的应用，分别开启应用配置。 适用地区 一个 client 仅能对应一个地区。这是由于在 RocGames 的账号系统内，将中国大陆用户与全球用户做了隔离区分，互不相通。 配置域名 使用 RDS 提供的云服务需要绑定 API 自定义域名，以便和其他厂商的应用隔离入口，避免其他应用受到 DDoS 攻击时相互牵连。 如果使用了数据存储中的文件服务，包括即时通讯的多媒体消息（图像、音频、视频等），需要绑定文件访问域名。 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/quickstart-and.html":{"url":"started/quickstart-and.html","title":"Android SDK","keywords":"","body":" [!NOTE|style:flat|labelVisibility:hidden|iconVisibility:hidden] 本文介绍如何快速接入 Android SDK 并实现 登录 功能。 页面提供了 Android 示例项目，可供参考。 (一)创建应用 请登录 开发者中心 注册为开发者并创建应用。 (二)环境要求 Unity 2019.4 或更高版本 Android 5.0（API level 21）或更高版本 (三)项目配置 [!DANGER|label:特别注意] aab包体需要控制在150M之内 参考官方文档https://developer.android.com/guide/app-bundle/asset-delivery?authuser=1 1. 获取必要参数 参数 说明 gameId 游戏ID appkey 游戏加密密钥 channelId 渠道 ID，目前固定为“GP” 2. 引入Android studio 依赖 1）在工程的根目录gradle中加入maven仓库的引用地址 buildscript { repositories { google() jcenter() mavenCentral() } dependencies { classpath 'com.android.tools.build:gradle:4.2.0' // 最低4.1.0，不然可能会编译错误 classpath 'com.google.gms:google-services:4.3.13' // google-services plugin 最低4.2.0，不然可能会编译错误 // Add the Crashlytics Gradle plugin classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.0' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { google() jcenter() mavenCentral() maven{ url 'https://raw.githubusercontent.com/Haimianbaby/MySdkSecond/master' } maven { url \"https://jitpack.io\" } } } 2）在工程的app gradle dependencies中加入aar引用并加上google配置 在最顶部加入 apply plugin: 'com.google.gms.google-services' // Apply the Crashlytics Gradle plugin 这个一定要加在com.google.gms.google-services之后 apply plugin: 'com.google.firebase.crashlytics' 在依赖中加入 implementation 'com.myLegend.secondsdk:mySecondSdkaar:2.5.7' 3）必须拷贝assets里的配置文件 sdk_config文件中配置正式域名和测试域名， adjust_config.xml 文件中配置adjust事件token 4）开启Androidx插件 在gradle.properties中添加下面的代码 // Android 插件会使用对应的 AndroidX 库而非支持库。 android.useAndroidX=true // Android 插件会通过重写现有第三方库的二进制文件，自动将这些库迁移为使用 AndroidX，但并不完全自动。 android.enableJetifier=true 然后在项目build.gradle里添加 android { ... ... compileOptions { sourceCompatibility 1.8 targetCompatibility 1.8 } configurations { all { exclude module: 'httpclient' exclude module: 'commons-logging' } } .... .... } 3. 配置AndroidManifest.xml 1）在工程 AndroidManifest.xml 加入以下权限 2）AndroidManifest.xml 配置 // 为了适配targetSdkVersion 28,需要加入以下配置，不加入可能会无法使用http链接 在application标签下加上 android:networkSecurityConfig=\"@xml/network_security_config\" 9.0 不再支持http 需要配置如下 以及加上 xml/network_security_config 在 节点下加入，注意不要加在节点下，用于查找是否安装Facebook app .... 其他配置 Facebook所需要配置的参数 strings.xml里 特别注意修改： 自己的Facebook id fb自己的Facebook id Facebook token参数 Google 登录id 至此所需的sdk前置配置都已完成，可以进行下一步sdk的接入了 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/quickstart-ios.html":{"url":"started/quickstart-ios.html","title":"IOS SDK","keywords":"","body":" [!NOTE|style:flat|labelVisibility:hidden|iconVisibility:hidden] 本文介绍如何快速接入 IOS SDK 并实现 登录 功能。 页面提供了 iOS示例项目，可供参考。 (一)环境要求 iOS 11.0 或更高版本 (二)项目配置 [!DANGER|label:特别注意] 请使用cocoapods集成管理三方库，以防止两边有共用三方库引起冲突 一、将SDK集成到Xcode工程中 1.0 把iOSSDK文件夹下的 framework + source.bundle 添加到工程中 1.1 工程添加google配置文件 和Plist文件同级目录下 如下所示: 2. 工程配置 2.0 target => general 2.1 target => Signing & Capabilities applinks:其值请查看参数表, 参数表对接时会提供. 2.2 推送配置 2.3 添加framework AdSupport.framework iAd.framework AdServices.framework CoreTelephony.framework StoreKit.framework AppTrackingTransparency.framework SafariServices.framework 其中 AppTrackingTransparency.framework、AdServices.framework 注意修改Status: Optional 如下: 2.4 target => Build Settings 添加:-ObjC(O和C大写) 2.5 target => Build Settings bitcode 设置为: NO 3. info.plist文件配置 3.1 添加如下code URLSchemes、FacebookAppID、FacebookClientToken、FacebookDisplayName对接时会提供参数表给到 CFBundleURLTypes CFBundleTypeRole Editor CFBundleURLSchemes ⚠️#可查看参数表#⚠️ FacebookAppID ⚠️#可查看参数表#⚠️ FacebookClientToken ⚠️#可查看参数表#⚠️ FacebookDisplayName ⚠️#可查看参数表#⚠️ LSApplicationQueriesSchemes fbapi fbapi20130214 fbapi20130410 fbapi20130702 fbapi20131010 fbapi20131219 fbapi20140410 fbapi20140116 fbapi20150313 fbapi20150629 fbapi20160328 fbauth fb-messenger-share-api fbauth2 fbshareextension 3.2 添加如下标签 3.3 value改为应用名 ￼ 3.4 添加隐私标签 相册权限、位置权限 如果为多语言应用，需要做语言国际化。 翻译相关可参考隐私权限语言国际化对照表 ￼ 3.5 添加广告追踪标签 广告追踪权限 如果为多语言应用，需要做语言国际化。 翻译相关可参考隐私权限语言国际化对照表 ￼ 4. 使用cocoaPods集成其它三方库到工程中 SDK所需三方库如下: source 'https://github.com/CocoaPods/Specs.git' platform:ios, ’11.0’ inhibit_all_warnings! use_frameworks! target '⚠️#工程主target#⚠️' do pod 'FBSDKCoreKit', '~> 14.1.0' pod 'FBSDKLoginKit', '~> 14.1.0' pod 'FBSDKShareKit', '~> 14.1.0' pod 'Firebase/Analytics' pod 'Firebase/Crashlytics' pod 'FirebaseMessaging' pod 'YYModel', '~> 1.0.4' pod 'Adjust', '~> 4.32.0' pod 'AIHelpSDK', '~> 4.1.7' end Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/overview.html":{"url":"core/daq/overview.html","title":"数据集成","keywords":"","body":"业务介绍 [!TIP|label:Tips] 本节仅介绍数据接入相关内容，数据分析 与 数据服务 请参看其他节。 在公开发行前, 请接入完整的数据, 以提供给运营团队分析。 前期工作 请确认已经在 开发者中心 > 应用配置 完成了开启操作。可参照入门指南中的准备工作。 功能接入 一、软件接口方式 ( API ) 接入特点: 接口对接方式的数据可靠性与价值较高，一般不存在数据重复的情况； 数据通过接口实时传输，满足数据实时性的要求。 二、开放数据库方式 ( RDS ) 接入特点: Relational Database Service, 实现数据的采集汇聚，开放数据库是最直接的一种方式。开放数据库方式可以直接从目标数据库中获取需要的数据，准确性高，实时性也能得到保证，是最直接、便捷的一种方式。 三、系统日志采集方法 ( LOG ) 接入特点: 系统日志采集，如Hadoop的Chukwa、Cloudera的Flume、Facebook的Scribe等。这能满足每秒数百MB的日志数据采集和传输需求，能够从各种日志源上收集日志，存储到一个中央存储系统上，以便于进行集中统计分析处理，日志的“分布式收集，统一处理”特性，提供了一个可扩展的、高容错的方案。 四、基于SDK事件追踪的方法（EVENT-TRACE） 接入特点: 可定制 五、基于底层数据交换的数据直接采集方式 接入特点: 通过获取软件系统的底层数据交换、软件客户端和数据库之间的网络流量包，基于底层IO请求与网络分析等技术，采集目标软件产生的所有数据，将数据转换与重新结构化，输出到新的数据库，供软件系统调用。 可以做到无感接入, 暂不支持 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/access-api.html":{"url":"core/daq/access-api.html","title":"1. API接入","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] API 接入请商务人员对接 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/access-log.html":{"url":"core/daq/access-log.html","title":"2. 日志接入","keywords":"","body":"1.分类（topic） 诊断日志 ：RCDiagnosticLog 携带明确的事件号与事件内容，上下文，网络，设备与堆栈信息等。 运行日志 ：RCRunLog 系统输出，三方IO的输入与输出等未明确的事件，可全量采集。 统计日志 ：RCStatisticalLog 网络数据 审计日志 ：RCAuditLog 支付 / 链改 / 核心资产 / 管理操作等的输入和输出，常用于审计对账。 2.格式 1.诊断日志： 请求入口(sourceIp)和出口(targetIp) 外部服务调用和返回 资源消耗操作(resource_operation): 如读写文件等 容错行为： 如云硬盘的副本修复操作 程序异常(program_exception)： 如数据库无法连接，资源加载失败 后台操作(background_operation)：定期执行删除的线程 启动、关闭、配置加载(start_loading,close_load,configuration_loading) 2.统计日志： 用户访问统计：用户IP(user_ip)、上传下载的数据量(flow_data，单位M)，请求耗时(request_time，单位s)等 3.审计日志： 日志通过不同的关键字进行区分：支付 payLog, 链改 NFTLog ,核心资产变动 coreAssetsLog 4.运行日志 ： 系统输出，三方IO的输入与输出等未明确的事件，可全量采集。 3.关于RequestID RequestID的作用: 一个系统通常通过RequestID来对请求进行唯一的标记，目的是可以通过RequestID将一个请求在系统中的执行过程串联起来。该RequestID通常会随着响应返回给调用者，如果调用出现问题，调用者也可以通过提供RequestID帮助服务提供者定位问题。前端生成，传给后端 RequestID的生成：需要根据实际的使用场景来选择 对于简单的系统，可以简单采用一个随机数即可 RequestID = md5(time.Now() + random.Int()) 4.日志需要的信息 一、设备信息 序号 字段定义 字段说明 字段类型 备注 是否一直携带 1 os_name 操作系统平台名称 string Android或iOS 是 2 os_brand 手机品牌 string 是 3 os_model 手机型号 string 是 4 os_version 手机操作系统版本 string 是 5 cpu_abi CPU架构 string 否 6 device_id 设备ID string 传adjust id 是 7 screen_width 屏幕宽 string 否 8 screen_height 屏幕高 string 否 9 display_density 屏幕密度 string 否 10 simulator 是否为模拟器 string 0-否；1-是 否 11 is_charging 是否正在充电 string 1：未知状态；2：充电中；3：放电中；4：未充电；5：充满 否 12 battery_pct 电池百分⽐ string 0-100 否 13 battery_temperature 电池温度 string 单位0.1，如359表示35.9°C 否 二、环境信息 序号 字段定义 字段说明 字段类型 备注 是否一直携带 1 network_type 网络类型 string 2G、3G、4G、5G、WiFi、Unknown 是 2 phone_carrier 运营商 string 是 3 is_root 是否Root string 仅【Android】0-否；1-是 否 4 is_jailbreak 是否越狱 string 仅【iOS】0-否；1-是 否 5 longitude 经度 string 否 6 latitude 纬度 string 否 7 address 地址信息 string 否 8 total_storage 内部存储总空间 string 单位M 否 9 free_storage 内部存储可用空间 string 单位M 否 10 total_ram 设备系统内存大小 string 单位M 否 11 free_ram 系统剩余内存 string 单位M 否 12 low_memory 系统是否处于低内存状态 string 0-否；1-是 否 13 total_memory 分配给App的总内存 string 单位M 否 14 max_memory 分配给App最大内存 string 单位M 否 15 free_memory App当前可用内存 string 单位M 否 16 permission_notification 推送是否打开 string 0-否；1-是 否 17 app_status 前后台状态 string background-后台、forground-前台 否 三、App信息 序号 字段定义 字段说明 字段类型 备注 是否一直携带 1 app_packname App包名 string 是 2 app_version app 版本号 string 是 3 app_channel app 渠道 string Android:GP; iOS:AS 是 四、SDK信息 序号 字段定义 字段说明 字段类型 备注 是否一直携带 1 sdk_version SDK版本号 string 是 五、用户信息 （sdk在用户登录之后获取并上报） 序号 字段定义 字段说明 字段类型 备注 是否一直携带 1 user_id 用户ID string 是 2 sub_id yeeha平台用户ID string 是 六、日志信息 序号 字段定义 字段说明 字段类型 备注 是否一直携带 1 RequestID 唯一的标记 string 具体生成规律参考上面说明 是 2 log_report_time 日志上报时间 string yyyy-MM-dd HH:mm:ss 是 3 log_content 日志内容 string 是 注： 其中一，二，三，四，五块的内容sdk可自行收集，并且在初始化时上报，上报时可打上标记，此后的每条数据都加上这个标记 // 设置tag信息，此tag会附加在每条日志上 config.addTag(\"device_info\", \"目前自行生成的设备id\"); 研发所需要传入的日志信息，比如统计日志： Map parMaps =new HashMap(); parMaps.put(\"topic\",\"RCStatisticalLog\"); parMaps.put(\"user_ip\",\"192.xxx.xxx.xxx\"); parMaps.put(\"flow_data\",\"100M\"); parMaps.put(\"request_time\",\"10s\"); parMaps.put(\"RequestID\",\"asd1234567890zxc\"); parMaps.put(\"log_report_time\",\"2023-02-21 10:10:10\"); parMaps.put(\"log_content\",\"日志内容，比如是否连接服务器成功，资源下载是否完成等\"); Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/access-event.html":{"url":"core/daq/access-event.html","title":"3. 埋点接入","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 Android登录 页面 接口定义 public void SDKAdjustPoints(Context context, String eventKey, Map parMaps) 参数说明 参数 类型 说明 eventKey 字符串 埋点参数字段，具体的传值请看埋点文档的事件名 parMaps 字符串 埋点所需传的参数集合，具体的传值请看埋点文档携带参数 [!WARNING|label:注意|iconVisibility:hidden] eventKey 复制埋点文档的事件名值 [!WARNING|label:注意|iconVisibility:hidden] parMaps key值复制具体对应埋点需求的携带参数，value需要游戏传具体值 示例代码 // 进入游戏的埋点 Map params =new HashMap<>(); params.put(\"uid\",\"1000393\"); params.put(\"serverid\",\"1\"); params.put(\"playerid\",\"d476b70c-961d-47cc-a62c-983b1a4ae2c0\"); MyExternalInterface.getInstance().SDKAdjustPoints(this,\"entry_game\",params); Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/access-event-and.html":{"url":"core/daq/access-event-and.html","title":"Android","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 Android登录 页面 接口定义 public void SDKAdjustPoints(Context context, String eventKey, Map parMaps) 参数说明 参数 类型 说明 eventKey 字符串 埋点参数字段，具体的传值请看埋点文档的事件名 parMaps 字符串 埋点所需传的参数集合，具体的传值请看埋点文档携带参数 [!WARNING|label:注意|iconVisibility:hidden] eventKey 复制埋点文档的事件名值 [!WARNING|label:注意|iconVisibility:hidden] parMaps key值复制具体对应埋点需求的携带参数，value需要游戏传具体值 示例代码 // 进入游戏的埋点 Map params =new HashMap<>(); params.put(\"uid\",\"1000393\"); params.put(\"serverid\",\"1\"); params.put(\"playerid\",\"d476b70c-961d-47cc-a62c-983b1a4ae2c0\"); MyExternalInterface.getInstance().SDKAdjustPoints(this,\"entry_game\",params); Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/access-event-ios.html":{"url":"core/daq/access-event-ios.html","title":"IOS","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 IOS登录 页面 接口定义 1.1 应用激活事件上报 请先初始化 SDK 可参考 IOS登录 在 - (void)applicationDidBecomeActive:(UIApplication *)application 方法中调用 示例代码: - (void)applicationDidBecomeActive:(UIApplication *)application { [ROCSdkManager activateApp]; } 1.2 埋点事件上报 具体埋点需求请查看 埋点文档 接口定义: + (void)azlEventName:(nonnull NSString *)eventName callbackParameter:(nullable NSDictionary *)dic; 接口对象参数包含字段说明: 参数 类型 说明 eventName 字符串 事件名（埋点文档中对应的事件名，⚠️不能自定义） dic NSDictionary 包含携带参数的对象，具体各个点需要携带的参数请参考埋点文档 调用示例如下: [ROCSdkManager azlEventName:⚠️#事件名#⚠️ callbackParameter:nil]; [ROCSdkManager azlEventName:⚠️#事件名#⚠️ callbackParameter:@{@\"uid\":@\"xxx\", @\"serverid\":@\"xxx\", @\"playerid\":@\"xxx\", }]; Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/access-events-table.html":{"url":"core/daq/access-events-table.html","title":"埋点文档","keywords":"","body":"埋点文档 1. SDK自带埋点 SDK自带的埋点 事件说明 事件名 触发时机 携带参数 sdk初始化 sdk_initialization_complete SDK初始化完成触发 - - - - - - 隐私协议展示事件 privacy_policy_show 隐私协议展示时触发 - - - - - - 隐私协议已同意事件 privacy_policy_agree 隐私协议同意后触发 - - - - - - sdk登录点击事件 login_start 点击登陆按钮时触发 login_type - - - - - sdk登录成功 login_success 登录成功时触发 uid subid login_type - - - sdk登录失败 login_unsuccess 登录失败时触发 login_type - - - - - sdk注册点击事件 regist_start 点击SDK注册按钮时触发 - - - - - - sdk注册成功 regist_success 邮箱注册成功、三方账号第一次登录时触发 uid subid login_type - - - sdk注册失败 regist_unsuccess 邮箱注册失败时触发 - - - - - - 邮箱绑定事件 email_bind_success 绑定邮箱时触发 uid subid serverid playerid playerid playername AiHelp弹出事件 aihelp_start 绑定邮箱时触发 uid serverid playerid playerid - - 充值开始 charge_start 点击充值按钮时触发 uid serverid playerid channelid - - 充值成功 charge_success 支付成功时触发 uid serverid playerid channelid orderid amount 充值失败 charge_unsuccess 支付失败时触发 uid serverid playerid channelid orderid - 分享开始 share_start 点击分享按钮时触发 uid serverid playerid channelid shareid - 分享成功 share_success 分享成功时触发 uid serverid playerid channelid shareid - 分享失败 share_unsuccess 分享失败时触发 uid serverid playerid channelid shareid - 2. 研发埋点 需要研发触发的埋点 携带参数说明: 均为字符串类型 amount:金额 level:当前等级 orderid:订单号 share_id:分享位标识 login_type:登录方式 serverid:为服务器ID。 playerid:为游戏内角色ID。 sourceip:客户端源IP地址 targetip:服务器目标IP地址 orderid:iOS订单ID、google订单ID。 channelid:安卓为“GP” 、iOS为:“AS” uid:用户标识，登录成功后返回的uid。 login_type:0：游客登录 1：fb登录 2：平台登录 3：断线重连 4：平台注册 5：在线跨天 6：自动登录 7：苹果登录 8：谷歌登录 事件说明 事件名 触发时机 携带参数 游戏版本效验 game_check 版本校验开始时触发 - - - - - - 游戏版本成功 game_check_success 版本校验成功时触发 - - - - - - - 游戏版本失败 game_check_unsuccess 版本校验失败时触发 ⚠️: 该事件仅在最终重试失败后触发 - - - sourceip targetip - - 游戏版本更新开始 game_updata 资源更新开始时触发 - - - - - - - 游戏版本更新结束 game_updata_success 资源更新成功时触发 - - - - - - - 游戏版本更新失败 game_updata_unsuccess 资源更新失败时触发 ⚠️: 该事件仅在最终重试失败后触发 - - - sourceip targetip - - 游戏弹出公告事件 game_announcement 公告弹出时触发 - - - - - - - 游戏弹出公告成功 game_announcement_success 公告内容加载完成时触发 - - - - - - - 游戏弹出公告失败 game_announcement_unsuccess 公告内容加载失败时触发 ⚠️: 该事件仅在最终重试失败后触发 - - - sourceip targetip - - 游戏获取服务器列表事件 game_serverlist 获取服务器列表时触发 - - - - - - - 游戏获取服务器列表成功 game_serverlist_success 获取服务器列表成功时触发 - - - - - - - 游戏获取服务器列表失败 game_serverlist_unsuccess 获取服务器列表失败时触发 ⚠️: 该事件仅在最终重试失败后触发 - - - sourceip targetip - - 登录游戏 login_relogin 游戏断线重连时触发 uid login_type - - - - - 点击进入游戏按钮事件 entry_game 点击进入游戏按钮时触发 uid serverid playerid - - - - 进入游戏成功 entry_game_success 进入游戏成功时触发 uid serverid playerid - - - - 进入游戏失败 entry_game_unsuccess 进入游戏失败时触发 ⚠️: 该事件仅在最终重试失败后触发 uid serverid playerid sourceip targetip - - 游戏角色创建开始 creat_role 进入创角页面时触发 uid serverid playerid - - - - 游戏角色创建成功 creat_role_success 创角成功时触发 uid serverid playerid - - - - 游戏角色创建失败 creat_role_unsuccess 创角中断/失败时触发 ⚠️: 该事件仅在最终重试失败后触发 uid serverid playerid sourceip targetip - - 首次充值 pay_1st 第一次充值成功时触发 uid serverid playerid channelid - - - 用户累计充值金额 pay_total 用户充值成功时触发 uid serverid playerid amount (累计金额) - - - 用户升级 level_up 玩家每次升级时触发 uid serverid playerid level - - - 首次通过某关卡 first_pass 玩家首次通过某关卡时触发 uid serverid playerid type（场景类型） chapterId（场景id） - - 虚拟币消费 spend_virtual_currency 玩家消费虚拟币时触发 uid serverid playerid type（虚拟币类型） value（数值） reason（流动原因） amount（流动后剩余总额度） 虚拟币赚取 earn_virtual_currency 玩家获得虚拟币时触发，包含宝箱，抽奖等渠道 uid serverid playerid type（虚拟币类型） value（数值） reason（流动原因） amount（流动后剩余总额度） 玩家充值货币增加 earn_currency 用户成功充值现金货币时触发 uid serverid playerid type（type（货币类型:如钻石、代金劵）） value（数值） amount（流动后账户总额度, 通常为游戏币） - 玩家充值货币消耗 spend_currency 用户成功消费现金货币时触发 uid serverid playerid type（type（货币类型:如钻石、代金劵）） value（数值） amount（流动后账户总额度, 通常为游戏币） - 商城按钮点击事件 click_enter_store 点击商城按钮时触发 uid serverid playerid - - - - 新手引导开始 click_role_guide_start 新手引导教程开启时触发 uid serverid playerid guideId（引导id） - - - Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/daq/access-rds.html":{"url":"core/daq/access-rds.html","title":"4. 数据库接入","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] 数据库 接入请商务人员对接 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"publish/publish-ops.html":{"url":"publish/publish-ops.html","title":"运维验收","keywords":"","body":"验收流程 1. 服务器架构及说明文档 背景 术语 系统概述 服务器软件环境 服务器硬件环境 客户端硬件环境 所用外部组件 系统设计 系统整体介绍 游戏架构图 游戏各模块分析 系统外部接口 系统设计要点 负载均衡策略 容灾策略 过载保护策略 数据扩容 业务流程 登录流程 注册流程 PVP战斗 PVE战斗 。。。 业务维护 配置文件 起服/停服脚本 维护注意事项 2. 服务器负载数据 单区服PCU 单区服注册上限 3. 服务器配置信息 云服务器 id 用途 主机名(hostname) CPU核数 内存 数据盘大小 系统及版本 数量 1 测试服 2 审核服 3 正式服 4 ... 云数据库 id 用途 数据库类型及版本 内存要求 存储要求 其他要求 数量 1 GameDB 2 LogDB 3 安全组端口设置 id 名称 关联服务器 协议类型 端口范围 源 端口说明 1 [示例]allow_players_to_gs GameServer TCP 8000-8088 ALL 允许所有玩家连接游戏服 2 3 CDN & 源站 源站类型： [ ] 对象存储 [ ] 使用服务器自建源站 CDN 缓存规则 其他资源申请 如负载均衡、文件存储 4. BI数据收集及同步 [ ] 业务数据库 [ ] 日志数据 [ ] 发行平台数据库 5. 数据库备份方案 冷备方案 热备方案 6. 容灾方案 7. 监控告警 服务器基础信息监控（发行方） CPU 内存 磁盘 流量 TCP连接数 进程监控 （开发方） 进程存活状态监测 进程心跳监测 端口监控 服务器内端口存活状态监控 外网重点端口监控 login game port 重点URL状态监控，内容监控 serverlist 公告 versioncheck 运营数据 推广/ 刷榜时间点 (大量用户进入时间点） 首周/首月预估服务器注册总人数，PCU 首周，首月开服数 特别注意： 确保没有IP写死进包体 每个项目资源独立，不要混用 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"publish/publish-qa.html":{"url":"publish/publish-qa.html","title":"测试验收","keywords":"","body":"测试流程 1.测试流程规范及说明文档 需求阶段 目标：理解需求，制定计划 工作内容： 1.测试需求分析 2.测试计划制定 输出： 1.测试需求分析文档 2.测试用例编写 3.测试计划书 开发阶段 目标：项目测试，提升游戏质量 工作内容： 确定版本发布功能点 功能测试用例设计 接口测试用例设计（如果有需求） 测试用例评审 进行功能测试/回归测试/验收测试 bug追踪管理 输出 功能/接口测试用例 缺陷报告 发布阶段 目标：安全稳定的将游戏上线 工作内容： 确认所有此次发布版本相关的bug是否已解决 确认所有功能的验收测试是否通过 和开发确认是否有版本回滚机制 和运维确认所更新的平台和渠道 和运维确认更新时间 开服前线上功能检查，着重测网络，语言本地化和支付相关 测试完成后通知到各方，并确认是否测试完成，是否能开服 输出： bug修复清单 线上功能Checklist 版本测试报告 4.运营阶段 目标：及时确认运营和客服反馈的线上问题，并第一时间反馈 工作内容： 确认所反馈的问题是否存在，尽可能的原环境复现问题 确认问题确实存在后，尽快反馈到开发或产品，并及时跟进解决 问题不管解决与否都需及时反馈到运营最后的解决方案 2.测试工具及专项测试方法 网络测试 所使用到的工具：Charles/Postman/Android Studio/WireShark/Fiddle等 各个工具的具体方法和作用 弱网测试： 1.使用到的工具：Charles or wireShark 2.弱网测试的目的：模拟不同网络环境下游戏的表现 3.弱网测试中，Charles的使用方法 https://zhuanlan.zhihu.com/p/140942687 网络抓包： 1.使用到的工具：Postman or WireShark/Charles 2.抓包测试的目的：可用于接口测试，也可用于流量监控等 3.Postman的使用方法 https://blog.csdn.net/weixin_67553250/article/details/128192765 性能测试 所使用到的工具：Perdog Perfdog介绍和使用方法 适配测试 目标：根据不同地区的机型覆盖率进行适配测试 覆盖率： 尽可能覆盖所发行地区的top100机型的适配，对top10的机型重点测试 测试方法： 公司的测试机,如果有需求找第三方进行适配测试并产出测试报告 ...未完待续 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"publish/qa/explore.html":{"url":"publish/qa/explore.html","title":"探索测试","keywords":"","body":"探索测试 测试目的： 通常在游戏正式引入和上线前，探索游戏内可能存在的问题，主要关注功能点，分支流程，玩法，游戏评价等。 测试流程 准备阶段 需求分析 1.根据策划文档，对于文档中的功能点进行需求分析，需求分析应包含对功能的意见和建议2.需求分析制作成文档形式，反馈到对应的策划方3.和策划确定好所有的功能需求后，完整需求分析文档 用例制作1.根据策划文档和需求分析文档，制定测试用例2.测试用例应覆盖所有功能点3.进行测试用例评审，评审方式推荐将测试用例给到开发和策划，然后一起评审看是否有需要修改和增加的测试点 游戏体验1.对整个游戏玩下来后的整体体验，制定成文档2.游戏体验应包含：UI体验，玩法体验，数值体验，等3.游戏体验制成文档后反馈给主策划，并给于反馈以及跟进对方对于游戏体验的反馈 测试阶段 执行测试用例1.对已编写的用例执行测试，搜集反馈所有遇到的bug2.当该功能有需求更改或者功能更新时，需要及时的更新用例3.用例测试执行完后，记录并反馈该功能已测试完毕 bug上报和追踪1.将测试过程中遇到的bug进行上报至对应的项目的bug管理工具中2.对bug进行定级和分类，以及对于需要解决的日期和期限3.当bug状态被开发或策划修改时，进行处理，如果状态修改为已修复则验证bug，如果状态修改为不处理或延期处理，需要确认原因4.bug验证完毕后，关闭对应的bug单 测试报告1.当前版本或者功能迭代的测试工作完成后，给到测试报告2.测试报告应包含：已结束的测试工作的质量报告，未完成的测试点以及未完成的原因，测试总结3.反馈测试报告到对应的项目团队 后续测试 该阶段测试工作结束后，进入到下一阶段测试工作（验收测试） Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"publish/qa/check-test.html":{"url":"publish/qa/check-test.html","title":"验收测试","keywords":"","body":"验收测试 测试目的： 游戏发布前主要的功能验收测试，关注完整支付系统测试，弱网环境测试，主流程测试等。 测试流程 功能验收 功能测试1.找对应项目方的测试人员提供测试用例2.如果没有对应的功能测试用例，则补充用例3.根据测试用例对总体功能进行测试，着重测试一些逻辑点的测试4.对各个系统进行功能验收 SDK测试1.确认是否接入需要接入的SDK2.对已接入的sdk进行测试3.sdk登录登出测试4.sdk注册账号测试5.sdk账号切换测试6.sdk接口测试7.sdk埋点测试8.游客登录、防沉迷相关、实名相关、未成年相关等测试 支付测试1.苹果支付测试2.谷歌支付测试3.付款后查看物品是否到账4.付款后查看扣钱是否正确5.确认商品价格是否正确，支付账单是否对应，各个档位的商品是否都支付正常6.商品名称显示是否正确、购买获得的物品能否使用等7.如果有折扣的话，折扣显示和扣除是否正确 弱网测试1.配置弱网环境/使用Charles等工具配置需要的弱网环境2.在弱网环境下对特定的场景进行弱网测试3.将对应的弱网环境下的测试结果进行总结并反馈 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"publish/qa/service-test.html":{"url":"publish/qa/service-test.html","title":"开服测试","keywords":"","body":"开服测试 主要关注更新、下载、安装、新手进入游戏流程，是否可支付流程等前期项目测试。 开服测试流程 1.双端下载好英文版线上服 2.登录游戏注册完成账号，将UID给到崔志龙添加白名单 3.【开服通知】群内提示新服已开启就需要登录MAPLE平台，将新服务器的状态更改为【全部可见】 4.进入游戏选择新服，确认白名单可以进入，创建角色跑一遍新手（角色达到17级） 5.新手跑完测试充值是否正常拉起，双端都需要测试 6.充值拉起正常后登录我们GM程序后台看看订单是否正常显示 7.充值测试完成后需要在游戏内确认服务器世界等级是否正常 8.都确认无问题后在群内通知新服测试完成 可以清档 9.通知后将服务器状态更换为：全部隐藏，然后等待运维 崔志龙 清档完成 10.清档完成后重复以上操作，清档后测试完成在群内通知崔志龙6点半关闭白名单 11.等六点半关闭白名单后将服务器状态更改为：fine 隐藏模式为：全部可见 节点标签为：new,然后保存 12.然后将之前的新服的节点标签改为：hot 13.再进入游戏查看推荐服务器是否是新服，然后再用非白名单账号是否可以进入新服？（非白名单可以直接用游客） 14.确认都正常可以进入后在群内通知新服开放 相关链接 服务器状态更改平台（MAPLE平台）：http://122.224.78.234:58006/sycamore/?region=iron&game=5 用户名：admin 密码：U1O+b[#y 程序GM平台：https://opww.oathofpeakww.com/admin?token=1c467aa6 用户名：YunYingAdmin 密码：caihc16xaa 美服IOS账号：avzxoukswq@icloud.com 密码：Dd112211 美服谷歌账号：yha560868@gmail.com 密码：oathofpeak123! 开服测试CheckList 工作说明：不同类型的项目研发根据实际的项目情况进行参照自查 1. 渠道 检查内容 检查标准 责任人 测试日期 测试结果 备注 渠道 共计2项 苹果商店检查（中英文本地化检查） 1.确保icon像素清晰，无异常 2.icon的内容正常，无异常 3.icon角标显示位置是否正常，无异常 4.确保产品介绍的文字说明没有问题，通顺 5.检查产品类型，例如：策略、动作、街机、ARPG等是否正确 6、购买项、商店图 googleplay检查（中英文本地化检查） 1.确保icon像素清晰，无异常 2.icon的内容正常，无异常 3.icon角标显示位置是否正常，无异常 4.确保产品介绍的文字说明没有问题，通顺 5.检查产品类型，例如：策略、动作、街机、ARPG等是否正确 6、购买项、商店图 2. 注册 检查内容 检查标准 责任人 测试日期 测试结果 备注 注册 游戏内注册功能 1.IOS在客户端游戏内快速注册，注册后可以正常登陆游戏 2.Android客户端游戏内快速注册，注册后可以正常登陆游戏 3.facebook接入的注册功能是否可用（多平台都要测试） 基础会员功能检查 平台修改密码、找回密码、邮箱绑定； 密码可找回，可以修改； 修改后正常登陆游戏； 3. 下载 检查内容 检查标准 责任人 测试日期 测试结果 备注 下载 共计4项 客户端下载及安装检查 1.苹果+安卓-是否可以正常下载 2. 下载速度是否合理是否可以正常安装 3.进入游戏（谷歌通过测试链接下载测试，IOS通过testflight下载测试） 官网提供用户下载的客户端是否最新版本客户端 核对客户端版本号，检查所有下载方式对应的版本是否均为最新版本客户端 强更换包提醒测试 测试老客户端弹窗是否能够跳转到对应的商店 二维码下载是否正常 检查苹果+安卓二维码扫码是否可以下载，下载安装后是否正常 4. 登录 检查内容 检查标准 责任人 测试日期 测试结果 备注 登陆 共计1项 游戏登陆功能检查 确保安卓和IOS都能进入到同一个服务器 4. 服务器列表 检查内容 检查标准 责任人 测试日期 测试结果 备注 服务器列表 共计2项 新服推荐检查 1.确认新用户登陆是否默认最新服 2.服务器列表展示是否最新服置顶，排列无误 例表页至进入游戏检查 1.点击服务器列表里的服务器是否异常，确认选择有效 2.服务器选择顺畅，操作便捷 3.确认登陆过的用户服务器展示是否是最近登陆过的服务器 5. 进入游戏 检查内容 检查标准 责任人 测试日期 测试结果 备注 进入游戏 共计3项 资源加载检查 1.确认进入游戏时加载顺畅，不闪退（苹果、安卓） 2.确认资源加载的引导是否合理(加载过程不消耗流量的表示是否清楚) 角色创建检查 1.创建角色 2.输入名字有效 3.自动创角功能是否正常可用 游戏前半小时新手引导检查 1.主线任务引导是否正确 2.主线流程中按键是否有效 3.主线任务奖励领取是否正常 4.新手礼包（兑换）领取是否正常 6. 消费 检查内容 检查标准 责任人 测试日期 测试结果 备注 消费 共计5项 充值——首充活动功能检查 1、活动是按服务器进行的，每组服务器，玩家使用同一个账号，可分别参与一次活动。 2、检查活动配置的奖励物品，与实际活动发放的奖励是否一致，有交易系统的需要确认是否均为绑定物品 充值——所有涉及到充值指向的功能按钮是否可以正常跳转检查 检查所有涉及到充值跳转的地方,检查跳转的页面是否正确，是否精确的跳转到充值页面。 充值-官方充值 IOS/谷歌官方充值所有档位是否正确，双倍、VIP经验是否能正确获得，sdk后台、adm后台是否能正确统计到数据 消费——商城购买检查 1.游戏内购买道具扣费是否对应价格 2.游戏内购买道具获得物品是否与点击内容符合 3.购买道具发送是否成功 4.点数不足时购买是否弹出充值推送 消费——游戏内月卡购买检查 月卡可在游戏中进行正常购买，购买获得的金额正确，功能正确 充值——第三方检查 1.目前提供第三方充值方式是否都可以正常使用， 是否都是正式环境； 2.第三方充值是否能获得双倍； 3.官网充值是否能正确获取到服务器列表、角色，sdk后台、adm后台是否能正确统计到数据； Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/check-items.html":{"url":"started/operation/check-items.html","title":"运营综合检查项","keywords":"","body":"上线（中英文）收费测试各主要块面工作检查清单 工作说明： 不同类型的项目研发根据自己的实际情况进行参照自查，让不同工作岗位的同事能够更加准确、高效的完成相关工作 1. 渠道 检查内容 检查标准 责任人 测试日期 测试结果 备注 渠道 共计2项 苹果商店检查（中英文本地化检查） 1.确保icon像素清晰，无异常 2.icon的内容正常，无异常 3.icon角标显示位置是否正常，无异常 4.确保产品介绍的文字说明没有问题，通顺 5.检查产品类型，例如：策略、动作、街机、ARPG等是否正确 6、购买项、商店图 googleplay检查（中英文本地化检查） 1.确保icon像素清晰，无异常 2.icon的内容正常，无异常 3.icon角标显示位置是否正常，无异常 4.确保产品介绍的文字说明没有问题，通顺 5.检查产品类型，例如：策略、动作、街机、ARPG等是否正确 6、购买项、商店图 2. 注册 检查内容 检查标准 责任人 测试日期 测试结果 备注 注册 游戏内注册功能 1.IOS在客户端游戏内快速注册，注册后可以正常登陆游戏 2.Android客户端游戏内快速注册，注册后可以正常登陆游戏 3.facebook接入的注册功能是否可用（多平台都要测试） 基础会员功能检查 平台修改密码、找回密码、邮箱绑定； 密码可找回，可以修改； 修改后正常登陆游戏； 3. 下载 检查内容 检查标准 责任人 测试日期 测试结果 备注 下载 共计4项 客户端下载及安装检查 1.苹果+安卓-是否可以正常下载 2. 下载速度是否合理是否可以正常安装 3.进入游戏（谷歌通过测试链接下载测试，IOS通过testflight下载测试） 官网提供用户下载的客户端是否最新版本客户端 核对客户端版本号，检查所有下载方式对应的版本是否均为最新版本客户端 强更换包提醒测试 测试老客户端弹窗是否能够跳转到对应的商店 二维码下载是否正常 检查苹果+安卓二维码扫码是否可以下载，下载安装后是否正常 4. 登录 检查内容 检查标准 责任人 测试日期 测试结果 备注 登陆 共计1项 游戏登陆功能检查 确保安卓和IOS都能进入到同一个服务器 4. 服务器列表 检查内容 检查标准 责任人 测试日期 测试结果 备注 服务器列表 共计2项 新服推荐检查 1.确认新用户登陆是否默认最新服 2.服务器列表展示是否最新服置顶，排列无误 例表页至进入游戏检查 1.点击服务器列表里的服务器是否异常，确认选择有效 2.服务器选择顺畅，操作便捷 3.确认登陆过的用户服务器展示是否是最近登陆过的服务器 5. 进入游戏 检查内容 检查标准 责任人 测试日期 测试结果 备注 进入游戏 共计3项 资源加载检查 1.确认进入游戏时加载顺畅，不闪退（苹果、安卓） 2.确认资源加载的引导是否合理(加载过程不消耗流量的表示是否清楚) 角色创建检查 1.创建角色 2.输入名字有效 3.自动创角功能是否正常可用 游戏前半小时新手引导检查 1.主线任务引导是否正确 2.主线流程中按键是否有效 3.主线任务奖励领取是否正常 4.新手礼包（兑换）领取是否正常 6. 消费 检查内容 检查标准 责任人 测试日期 测试结果 备注 消费 共计5项 充值——首充活动功能检查 1、活动是按服务器进行的，每组服务器，玩家使用同一个账号，可分别参与一次活动。 2、检查活动配置的奖励物品，与实际活动发放的奖励是否一致，有交易系统的需要确认是否均为绑定物品 充值——所有涉及到充值指向的功能按钮是否可以正常跳转检查 检查所有涉及到充值跳转的地方,检查跳转的页面是否正确，是否精确的跳转到充值页面。 充值-官方充值 IOS/谷歌官方充值所有档位是否正确，双倍、VIP经验是否能正确获得，sdk后台、adm后台是否能正确统计到数据 消费——商城购买检查 1.游戏内购买道具扣费是否对应价格 2.游戏内购买道具获得物品是否与点击内容符合 3.购买道具发送是否成功 4.点数不足时购买是否弹出充值推送 消费——游戏内月卡购买检查 月卡可在游戏中进行正常购买，购买获得的金额正确，功能正确 充值——第三方检查 1.目前提供第三方充值方式是否都可以正常使用， 是否都是正式环境； 2.第三方充值是否能获得双倍； 3.官网充值是否能正确获取到服务器列表、角色，sdk后台、adm后台是否能正确统计到数据； 7. 其它运营标准检查项 检查内容 检查标准 责任人 测试日期 测试结果 备注 其它运营标准检查项 共计7项 活动后台验收 是否可以正常进行常规活动的规则与奖励配置 发奖功能测试 道具发放；向所有服发一批涉及的活动道具，每个服都能领到奖励，奖励正确。 GM系统 公告；单服公告、全服公告；服务器、时间、频率正常 封号、禁言、玩家属性查询功能修改是否正常、游戏内各项开关及配置是否正常 平台网页提单功能是否正常 提单系统；检查提单页面问题类型配置及服务器列表显示情况；服务器正确，流程正常。 运营数据 所有运营数据是否都有正常抓取，新服开启后，后台是否可以看到新服数据；一定要可以实时获取到当天的充值、登陆、新安装数据，以及前一天的留存、付费率等运营数据；也必须可以分服拉取每天的运营数据 运维&资源准备 服务器硬件配置；服务器硬件配置以及系统环境已按照项目需求提供； 机房带宽是否可以满足同时在线的需求 cdn配置是否有问题 口碑维护 确认安排各平台评论、粉丝页维护人员和维护责任 8. 活动 检查内容 检查标准 责任人 测试日期 测试结果 备注 活动 共计12项 FB邀请、分享、点赞活动 1.检查后台是否配置 2.奖励是否可以领取3、分享图点击是否可以跳转到对应商店4、被邀请的人是否能收到信息 开服活动 1.检查游戏“开服活动”功能按钮 2.检查领取到的道具是否正常 运营活动 1.检查游戏运营活动功能按钮 2.检查领取到的道具是否正常 升级礼包 1.检查游戏“奖励领取”功能按钮 2.检查达到等级后，是否可以正常领奖 3.检查领取到的道具是否正常 五星好评赢好礼 1.检查游戏五星评分活动功能是否有效 2.检查礼包是否正确 3.每个角色限领一次 排行榜冲榜活动 1.检查游戏内排行榜活动功能 2.检查达到活动标准后，是否可以正常领奖 3.检查领取到的奖励是否正常 首充双倍（三倍） 1.检查游戏内首次充值是否到账 2.一个账号只有第一次/每个档位第一次充值才能享受 3、第三方充值的双倍机制是否合理 累计充值活动 1.检查累计充值活动描述是否正确 2.检查累计充值各档次奖励内容是否正确 3.每个角色各累计档次限领一次 精彩攻略编写活动 1.粉丝页活动规则发布 2.安排人员进行攻略审核 3.奖励发布 建议BUG收集活动 1.粉丝页活动规则发布 2.建议BUG采集 3.奖励发布 文字公告 文字公告加上：第三方充值和联系我们 活动公告 1.检查活动时间 2.检查活动规则 3.检查活动奖励 4.检查活动数量 9. PC官网 检查内容 检查标准 责任人 测试日期 测试结果 备注 PC官网 共计6项 游戏资料 资料内容与版本匹配，文字润色到位，页面样式及内容是否正确 网站按钮，超链接 引导页、首页、二级页的按钮、文字、图标链接；点击商店下载按钮跳转至指定地址，第三方apk包上传到服务器 活动页面入口（如果有） 活动页面通过入口进去正确地址。所有入口和链接地址正确 不同网络类型访问检查（手机） 在3G、无线网络环境的情况下测试官方访问是否存在异常 公告、活动内容检查 1.确认官网公告和活动的标题准确 2.开服公告检查（开服时间检查、开服活动时间检查，开服活动奖励及描述检查） 官方公众微信号、粉丝页检查 1.微信公众号的号码正确 2.微信的二维码扫描无异常 3.微信号添加后是否有系统回复 4.facebook图标是否正确 5.facebook关注是否跳转正确和成功关注 10. 资料专题 检查内容 检查标准 责任人 测试日期 测试结果 备注 资料专题 共计4项 游戏攻略 内容描述与版本相符，链接跳转至指定页面，内容更新与版本同步；内容及链接是否正确 阵型/技能介绍 内容描述与版本相符，链接跳转至指定页面，内容更新与版本同步；内容及链接是否正确 新手指南 内容描述与版本相符，链接跳转至指定页面，内容更新与版本同步；内容及链接是否正确 人物/职业展示 内容描述与版本相符，链接跳转至指定页面，内容更新与版本同步；内容及链接是否正确 11. 其他 检查内容 检查标准 责任人 测试日期 测试结果 备注 其它 共计3项，3项未到验收时间 FAQ相关 检查官网FAQ是否为最新版本 弹窗公告 确保服务器未开启的时候，有弹窗告诉玩家什么时候开服 PUSH功能 确保PUSH正确且我们能手动发送对应的Push 广告数据 确保AF后台安装数和充值数正确 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/work-node.html":{"url":"started/operation/work-node.html","title":"运营组工作节点","keywords":"","body":"运营验收工作自查表 工作说明： 游戏运营验收工作点，需要游戏研发、策划进行深度配合快速定位问题的文档。 1. 运营验收工作点 序号 事项 当期进度 负责部门 相关负责人 时间截点 运营 商务 研发 市场 运维 需求发起人 落实执行人 开始时间 完成时间 1.0 活动 1.1 等级礼包 ✔ ✔ 1.3 每日签到礼包 ✔ ✔ 1.2 通关礼包 ✔ ✔ 1.4 排行榜奖励活动 ✔ ✔ 1.5 建议BUG收集活动 ✔ ✔ 1.6 首充翻倍 ✔ ✔ 1.7 累计充值活动 ✔ ✔ 1.8 邀请礼包 ✔ ✔ 1.9 开服礼包活动 ✔ ✔ 1.1 每日签到礼包活动 ✔ ✔ 1.11 升级礼包 ✔ ✔ 1.12 五星好评赢好礼 ✔ ✔ 1.13 排行榜冲榜活动 ✔ ✔ 1.14 冲级活动 ✔ ✔ 1.15 累计充值活动 ✔ ✔ 1.16 精彩攻略编写活动 ✔ ✔ 1.17 建议BUG收集活动 ✔ ✔ 1.18 发奖测试 ✔ ✔ 1.19 活动后台测试 ✔ ✔ 1.2 礼包兑换 ✔ ✔ 2.0 网站 2.1 活动专题 ✔ ✔ 2.2 游戏资料检查 ✔ ✔ 2.3 粉丝页检查 ✔ ✔ 2.4 网站按钮、超链接检查 ✔ ✔ 2.5 注册登陆功能检查 ✔ ✔ 2.6 官网充值检查 ✔ ✔ 2.7 官网下载链接检查 ✔ ✔ 2.8 官网二维码下载检查 ✔ ✔ 2.9 官网微信、微博检查 ✔ ✔ 2.1 325版本改善内容检查 ✔ ✔ 2.11 OB开启公告 ✔ ✔ 2.12 充值FAQ ✔ 2.13 各类紧急公告准备 ✔ 2.14 CDN下载测试 ✔ ✔ 3.0 产品上线 3.1 （时间）项目出包时间确认 ✔ ✔ 3.2 （时间）服务器验收 ✔ ✔ 3.3 （时间）下载地址放出 ✔ 3.4 （时间）测试开启 ✔ ✔ ✔ 4.0 数据统计 4.1 数据统计及验收 ✔ 5.0 服务器相关 5.1 服务器硬件申请 ✔ ✔ 5.2 提供服务器 ✔ 5.3 服务器资源带宽、CDN确认 ✔ 5.4 服务器筹备确认 ✔ ✔ 6.0 测试服务器相关验收 6.1 客户端下载验收 6.2 客户端安装验收 6.3 客户端版本更新验收 6.4 客户端版本号验收 6.5 SDK对接验收 6.6 游戏内注册功能检查 6.7 游戏登陆验收 6.8 新服推荐检查 6.9 例表页至进入游戏检查 7 资源加载检查 7.1 角色创建检查 7.2 游戏前半小时新手引导检查 7.3 游戏充值功能检查 7.4 游戏月卡购买检查 7.5 游戏首充活动验收 7.6 游戏商城购买验收 7.7 游戏功能检查 8.0 充值相关 8.1 充值渠道开通 ✔ 8.2 充值面额、额度确认 ✔ 8.3 充值渠道检查 ✔ 8.4 充值渠道上线 ✔ 8.5 官方充值链接检查（官网、游戏内） ✔ 9.0 会议 9.1 评审会 ✔ ✔ 9.2 上线动员会 ✔ ✔ 10.0 客服沟通 10.1 建议整理汇报 ✔ 10.2 BUG整理汇报 ✔ 10.3 日常沟通 ✔ 11.0 游戏维护 11.1 BUG收集 ✔ 11.2 google平台言论维护 ✔ 11.3 粉丝页维护 ✔ 部门协作 相关工作安排 ✔ ✔ ✔ ✔ ✔ Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/operation.html":{"url":"started/operation/operation.html","title":"运营工作概览","keywords":"","body":"运营验收流程 游戏运营是讲一款游戏平台推入市场，通过对平台的运作，是用户从接触、认识、再到了解实际线上的一种操作，最终成为这款游戏平台的忠实玩家的过程。并且通过一系列对游戏收益有利的手段进行宣传等，让游戏提高线上人数，刺激消费增长利润等为目的，从而达到收益化。 游戏运营主要分为以下几个步骤： 一、前期试玩： 多方位的了解游戏本身的优势，技术优势，看看适合的人群都有哪些？并且通过了解游戏适用的平台、题材、IP、核心玩法、开发进度计划、收费点设计、收费方式、竞争对手的情况，并加以汇总、制成表格，这样每一期的增长减少情况就会一目了然。 二、接入游戏： 通过决策，确定游戏的开发进度是否和预计上线时间所冲突，如果在预定时间内不能将游戏测试完，那么就要和运营小组沟通，把游戏上线的时间错开，去看游戏的各个测试版本，适当的调节游戏数值和收费点。 三、测试期、上线准备： 根据之前获得的信息，和媒介、市场、渠道的同事开会，讨论出游戏的宣传点和市场投放计划，把流量资源的部分搞定，预估上线时大概的用户量和成本。 根据市场、投放、运营自身的需要编写埋点文档、与平台研发、SDK研发、游戏研发进对接测试 四、正式上线： 关注游戏上线后的情况，包含下载及注册登录流程，开率怎么留住更多的用户，随时注意ROI指数，将其列一个标出来每次做对比，之后是用户反馈的结果统计，不定期的进行用户反馈是至关重要的，这决定游戏的走向，这部分的数据一定要密切关注。溪谷科技提供游戏运营平台可以一站式管理游戏运营数据哦，报表丰富多样，可以实时查看，为调整游戏运营策略提供精确的数据支撑。 五、运营期： 关心游戏的每个版本后用户的实时反馈，对于出现的问题一定要第一时间解决，不然会影响玩家的心情，会制造网络舆论，这对游戏本身是非常不好的。 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/market-currency-sop.html":{"url":"started/operation/market-currency-sop.html","title":"投放SOP一（主流程部分）","keywords":"","body":"投放SOP一（主流程部分） 工作说明： 投放的操作标准步骤和要求以统一的格式描述出来，用来指导和规范日常工作，投放SOP的最佳效果是随便一个运营投放参照文档做，减少减少出错率 1. APP上线前准备 分类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 预算及导量规划 拟定预算版本和各媒体规划。 1.尚无营运数据指标下，可先以游戏评级投做为导量模拟。（评级标准询问运营） A级：美金 B级：美金 2.后续仍须跟进运营端/策划端，目标取得营运对产品的营收预估、营运数据预估等，以便规划市场预算以及UA预算。 3.使用脑图作广告架构规划/预算/受众/素材规划，做出对应媒体计划方案及导量规划 4.素材规划与首席文化官开会确认。确认内容：素材规划方向/未来预计的产出数量 投放 提案后一周完成 首席营销官 投放 2022/5/31 ADJ 包名建立 ADJ管理员账号：数据同学操作建立ADJ包名 投放 SDK测试前一周 2022/6/30 ADJ/ firebase权限索取 UA共享账号，绑定GA ADMIN/ FIREBASE管理员。事件引入用该账号操作，不申请其他账号。 投放/项管 SDK测试前一周 2022/7/5 ADJ/firebase事件确认/SDK产出 1. 确认事件点位与名称。注意需要与第三方命名区分。如ADJ_login/ G_login 2. sdk产出时间与权限在项管。需在运营SDK包入时接入。投放端需积极追踪包的进度。 3. 基本事件点位 sdk包内建事件： ◆ login ◆ complete_registration ◆ tutorial_completion ◆ purchase ◆ level_up 投放/技术 通常在上线前三个月 2022/6/24 送包前：ADJ Event测试（双端） 1. 跟进运营端包的节点，预先提醒运营送包前做ADJ测试。提醒QA联系双端(and/ios)测试 2. 明确：测试游戏，设备白名单，测试OS（安卓还是IOS或者双端） 3. 储值务必每个档次都要测试(要提醒QA) 测试事件的正确性 *特别注意币别/币值 4. 群内与QA对接，给到excel事件表，核对事件时间，事件类型与金额 5.确认无误后，请QA给到验收信件 投放/运营 正式出包前， 约OB前两周进行 2022/8/2 正式上线：ADJ Event测试（双端） 1. 确认实际上线ADJ点位与事件是否正常回传 2. 确认ADJ流水与运营数据相符 3. 「成本」=花费，嵌入主投账号（该主投账号需有操作广告账号权限才可全数拉入） 4. 渠道设定对接开启 投放 开广告前一天 2022/8/12 2. 事前预约上线前准备 分类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 商店预注册数据 ios和Google play的商店预约数同步 预注册商店数据表：预约数据（运营填写）、投放数据（投放填写）、汇总以及分析 *注意运营端和广告端数据均分地区 投放/运营 预注册投放期间 nft用户导量计划 结合产品针对gamefi活动节奏的导量计划以及素材 1.nft用户导量预算与计划结合nft活动 2.素材参考以及素材制作 预算及导量规划 拟定事前预约的预算版本和各媒体规划。 1.事前预约量级预估。尚无营运数据指标下，可先以游戏评级投做为导量模拟。（评级标准询问运营） 2.使用脑图作广告架构规划/预算/受众/素材规划，做出对应媒体计划方案及导量规划 3.素材规划与首席文化官开会确认。确认内容：素材规划方向/未来预计的产出数量 投放 开广告前一个月 2022/7/16 网页埋点(Facebook) 产出以下点位给到策划埋入事前预约网页 1. 必埋点位：（标准事件）pageview, （标准事件）注册; （自定义事件）iOSdownload, （自定义事件）Androiddownload。 2. （必做） （自定义事件）在『事件管理工具』，选择『自定义转化事件』，选择下拉事件， iOSdownload指定命名为iOSdownload，Androiddownload指定命名为Androiddownload。 3.测试：检查像素的CHROME插件 https://chrome.google.com/webstore/detail/facebook-pixel-helper/fdgfkebogiimcoedlicjlajpkdmockpc?hl=zh-TW 4.(DOUBLE CHECK)查看『事件管理工具』面板是否有数据回传。 以上见右 投放 开广告前一个月 2022/7/16 网页埋点(Google) 产出以下点位给到策划埋入事前预约网页 1. 必埋点位：pageview, 注册; iOSdownload, Androiddownload。 2. 测试：检查像素的CHROME插件 https://chrome.google.com/webstore/detail/tag-assistant-by-google/kejbdjndbnbjgmefkgdddjlbokphdefk?linkrate=1&hl=zh-TW 3. (DOUBLE CHECK)查看Google转换面板是否有事件述记录。 投放 开广告前一个月 2022/7/16 双商店后台查看预约量权限 向项管申请双商店预约数据查看权限，模版请见\"公版-双商店预约后台权限申请\" 投放/项管 预约开启前 代投 1. 代投账号绑定至BM，由管理员账号将ua同学的操作账号绑入该代投广告账户。 2. 像素转至代投账户。 3. offer信件发送，见模版\"代投信件模版\"。确认kpi等，与首席营销官同步。 投放 开广告前一个月 3. 旧品重启 分类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 五星评价检查 检查商店首页有负评或低于4.2分，首席营销官安排市场人员进场维护 *因GP商店有更新规则，评分会24~48小时更新一次，故五星维护需开启前72小时前执行。 市场/投放 开启前3天 旧产品投放确认 1.确认需重启投放的原因、营运数据。 2. 确认预算、金额、量级。 3. 确认重启时间。 4. ADJ串接状况、ADJ事件确认(创角、付费) 5.素材确认 (确认数量、题材) 投放 每月25号or重启前2周 ADJ Event测试 旧游戏重启 可能因更新或热更导致事件异常，广告重启前一周需确认事件正常。 检查创角和付费事件。 需要的信息: (向QA确认) 请QA要提供测试设备加入白名单 原厂已完成的串接的事件检测 每个储值档次都需要测试 sdk包内建事件： ◆ login ◆ complete_registration ◆ tutorial_completion ◆ purchase ◆ level_up 投放/QA 重启前1周 填写 在线广告账号表单 如有新增广告账号账户，则须更新表单（UA-标准模版-FB广告帐号使用状况/GOOGLE广告帐号) 由主投通知 首席营销官安排市场人员负责 投放 上线前3天 4. 投放期间 分类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 次月投放确认 每月第三周确定下月投放预算 投放 每月25号 正式上线：ADJ Event测试（双端） 1. 确认实际上线ADJ点位与事件是否正常回传 2. 确认ADJ流水与运营数据相符 3. 渠道设定对接开启：FB/GOOGLE/LINE/Qoo/以及其他渠道。fb/google需打开「成本」，即是渠道花费，嵌入主投账号（该主投账号需有操作广告账号权限才可全数拉入） 投放 OB当天 如产品的第三方是套用adjsut时则需参考此项 5. 代投 分类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 代投offer 1.给予代投相关产品信息：新闻稿,applink, APK,粉丝团 2.投放内容会议：广告架构, KPI, 素材方向与数量产出 3. offer信件确认：开启前与 首席营销官 确认完毕。模版见\"UA-标准模版>>代投信件模版\" 投放 开广告前一周 6. 结案 分类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 上月结案 次月1日前整理给 首席营销官 投放 次月首周三前 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/market-FB-sop.html":{"url":"started/operation/market-FB-sop.html","title":"投放SOP二（FB部分）","keywords":"","body":"投放SOP二（FB部分） 工作说明： 投放的操作标准步骤和要求以统一的格式描述出来，用来指导和规范日常工作，投放SOP的最佳效果是随便一个运营投放参照文档做，减少减少出错率 1.上线前测试 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 产品名称测试/icon测试/五图测试 由市场部专门人员发起需求给投放同学 投放 上线前1周~2周 doing 2. 上线前准备 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 粉丝团创建 产品名称确定后，即可创建粉丝团 CB: 因不须经营社群，投放进行创建。 OB:需经营社群，OB名称确定后，通知社群部门创建。 *粉丝团Icon 图片，与应用程序需统一，请向运营double check。 投放 社群 上线前1周~2周 全球done 泰语doing 开设账号 广告账号须于建立广告前7个工作天送出账号申请，分端、分产品、地区、优化目的类型(install、AEO、Value)分别开广告账号。 遇大陆假日需提前申请 当天申请时需请厂商同步进行申诉，以避免被FB限定单日金额，影响后续投放作业。 ＊账号命名方式：代充值供应商-游戏名-编号(01.02等） ＊香港、澳门算同一个地区 ＊install可和事前预约同个账号（依各投手投放习惯做区分也可） ＊每款项目开立四个账号，部分备用 以上开设完成后，在\"UA-标准模版>>广告帐号使用状况\"填入 投放 上线前1周 Doing Doing FB camapign命名规则（以英文方式进行命名） 举例: 游戏代称安卓安装导向台湾大受众优化师商行建立时间自定义(dynamic组) MHA_And_MAIA_TW次核心人群SH_0915_dynamic FB adset命名规则（以英文方式进行命名） 举例： 安卓安装导向年龄性别受众细化建立时间自定义 And_MAIA_18-65_ALL卡牌游戏_0915_dynamic 优化目的对应英文缩写： 优化安装 > MAIA 优化付费事件 > AEO 优化付费金额> VO 广告账号充值到位 广告账号一次充满10万美金，并且需随时确认花费剩余状况 投放 上线前1周 Doing Doing 开启自动进阶配对 事件管理工具 > 选游戏 > 设定 > 进阶配对 >自动进阶配对 打开 投放 上线前1周 FALSE N 为应用程序开启自动进阶配对有助于提升转换次数和扩大自订受众规模。 「自动进阶配对」功能会将顾客识别资料（例如电子邮件地址和手机号码）传送至 Facebook，以和 Facebook 用户进行配对， 且在顾客识别资料传送至 Facebook 前，「自动进阶配对」功能会先自动对这些资料进行杂凑处理。 配对结果增加不仅代表您可将更多转换次数归因于 Facebook 广告，还能透过「再行销」营销活动触及更多人。 Facebook SDK 5.8.0 以上版本支援应用程序自动进阶配对。 https://www.facebook.com/business/help/2445860982357574 填写 在线广告账号表单 如有新增广告账号账户，则须更新表单（UA-标准模版-FB广告帐号使用状况/GOOGLE广告帐号) 投放 上线前3天 FALSE ADJUST 第三方串接设定 1. 开启广告前5个工作天确认，与QA后台事件是否正确。 2. App Setting确认商店地区、币别信息、时区是否正确。 3. 合作伙伴配置开启：「渠道开启」，「成本」。双端确认开启。 投放/QA 上线前5天 FALSE 素材制作时程 与美术确定素材制作进度。 美术 上线前1周 Done 11月16日 文案云端记录 1.根据不同主题设计文案，并且同步云端 \"UA-标准模版>>广告文案\" 2. 提交本地同学送审，检查文案与素材 投放 上线前1周 Done 11月初 运营delvelop后台设置 1. 确定Developers APP里的【基本资料】→平台商店信息是否设定完成。双端包名/隐私设定等。 2. 确定Developers APP是否已开启对外，显示「APP上线」 3. 广告账号取得后，至[连结]选取对应账号名，并同意接受条款。 4. 主投与UA同学都需加入权限，权限申请找项管 投放/运营 上线前1周 FALSE 代操offer 1.给予代投相关产品信息：新闻稿,applink, APK,粉丝团 2.投放内容会议：广告架构, KPI, 素材方向与数量产出 3. offer信件确认：开启前与小路/sansa确认完毕。模版见\"UA-标准模版>>代投信件模版\" 投放 上线前3天 FALSE 运营确认信件 广告开启前，CB/OB都需给运营发「广告设定」内容信件，模版请见\"UA-标准模版>>公版-与运营确认广告开启内容\" 投放/运营 上线前3天 FALSE 3. 投放期间 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 次月投放确认 于25号确定下月是否投放。 投放 每月25号 Done 4. 结算 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 结算 于次月10日前完成结算。@木尼 投放 次月10号 Done INVOICE 于次月10日前完成结算并请厂商开立invoce。 投放 次月10号 Done 数据回填 次月10日前完成回流回填。 投放 次月10号 Done Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/market-GAD-sop.html":{"url":"started/operation/market-GAD-sop.html","title":"投放SOP三（GAD部分）","keywords":"","body":"投放SOP三（GAD部分） 工作说明： 投放的操作标准步骤和要求以统一的格式描述出来，用来指导和规范日常工作，投放SOP的最佳效果是随便一个运营投放参照文档做，减少减少出错率 1. GAD上线前准备 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 开设账号 [广告账号须于开广告 前三周或更早即送出 账号申请，分产品、 地区、投放目的(事预 、上线)分别开广告账 号。 账号申请步骤如 右： 以上开设完成后，在\"UA-标准模版>> 广 告帐号使用状况\"填入 申请完后同步google 官方 投放 上线前3周 FALSE 由于白名单是一周一次，事预发布又要1-3天才抓得到。 需要更提早准备好 [账号申请步骤] 1. 事预UAC账号/GAD账号(联播网 关键字)/OB用的账号 2. 检测应用程序广告是否抓得到包 3. 建立广告(不用开跑) 申请UAC事预白名单 4. 其他白名单申请 (OB用的账号 UAC可以使用bumper) 针对上述第三点补充： GP发布后 GAD广告后台同步会有时间差 统一更新商店所有APP到广告后台的时间是每周1~2的00：00，其余时间为部分更新 也就是APP上去后最好是抓一周的时间 白名单申请后又要一周 (一周一次) 如加上创建时间，按照这情况最好三周前GAD广告就要开始准备 商店页发布后 48小时后在广告后台仍无看到，可向google提供商店页截图以及包名，进行手动申请统计表如下 https://docs.google.com/spreadsheets/d/1c868lF68NZsPSWFZVwAgryJRXwMEojx9f8wpzv8wT50/edit#gid=0 转换设置 工具>转换>纳入第三方转换，value设置为0。 投放 上线前1周 FALSE 文案云端记录 1. 根据不同主题设计文案，并且同步云端 \"UA-标准模版>>广告文案\" 2. 提交本地化送审，检查文案与素材 投放 上线前1周 Done 1月15日 google广告建立 完成广告建立并审核，若超过24小时未通过，则通知人工审核。 广告命名方式如右： 投放 上线前1天 FALSE GAD广告命名逻辑(建议) [格式] 游戏代称产品地区广告类型广告方式优化师建立日期 UACPRE/NOR = UAC 1.0/2.0 UAC AEO = UAC 2.5 UAC VO = UAC 3.0 (FIREBASE 才有） Youtube = YT YT_Form （此为买量广告-名单型） YT_Branding （此为曝光广告） 例如 DM_UAC_TW_UAC_PRE_lica_1015 DM_UAC_HK_UAC_1.0_lica_1015 DM_YT_HK_UAC_YT_lica_1015 [事件类别] 新手/付费/创角 ..其他 注: 1.0 即是安装，不用另外加注 转换(事件)命名方式 事件名称平台_游戏名(账号别)_AF/ADJ/Firebase In-app purchase_AND_MD_Firebase ecommerce_purchase_AND_MD_Firebase begin_checkout_AND_MD_Firebase add_to_wishlist_AND_MD_Firebase First open_AND_MD_Firebase In-app purchase_AND_MD_af ecommerce_purchase_AND_MD_af begin_checkout_AND_MD_af add_to_wishlist_AND_MD_af First open_AND_MD_af GAD游戏上线检查表 GAD游戏上线检查表，包含短秒数白名单申请等，各项项目填写，并通知google窗口，参阅备注连结。 投放 上线前1周 Done 11月中 https://docs.google.com/spreadsheets/d/1c868lF68NZsPSWFZVwAgryJRXwMEojx9f8wpzv8wT50/edit#gid=0 ADJ串接设定 产品商店生效后，于GAD后台生成连结ID， [工具]→[已连结账户]→[第三方应用程序分析]→[+]→[第三方分析]→[+]→[设定相关信息]→[建立连结ID]，再将连结ID复制到AppsFlyer上设定。双端确认开启。 投放 上线前1周 Done 11月中 firebase设定 与技术确认是否有firebase设定。在google firebase检查串接。 ua共享一个账号，该账号需拥有mcc管理员＋firebase管理员权限，才可在ga汇入事件 投放/技术 上线前1周 Doing Firebase授权流程 1.Firebase、GAME项目授权给mcc的mail(ua统一一个） 2.GAD账户存取权加入该mail>收mail>接受邀请 3.GAD>已连结的账户>google firebase[详情]>连结所属的game 4.GAD转换>[+]>应用程序(purchase纳入转换，改成[否]。转换命名。)>firebase 素材制作时程 与美术确定素材制作进度，确认有无短秒数影片 美术 上线前1周 FALSE 短秒数影片使用时机 代操offer 1.给予代投相关产品信息：新闻稿,applink, APK,粉丝团 2.投放内容会议：广告架构, KPI, 素材方向与数量产出 3. offer信件确认：开启前与小路/sansa确认完毕。模版见\"UA-标准模版>>代投信件模版\" 投放 上线前3天 FALSE 运营确认信件 广告开启前，CB/OB都需给运营发「广告设定」内容信件，模版请见\"UA-标准模版>>公版-与运营确认广告开启内容\" 投放/运营 上线前3天 FALSE 2. 投放期间 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 出价建议表 对出价事件进行试算 试算方式： 事件成本出价（install/ 购买事件成本等) 换算方式UA统一逻辑 投放 投放一周后 FALSE 次月投放确认 于25号确定下月是否投放。 投放 每月25号 Done 3. 结算 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 结算 于次月10日前完成结算。 投放 次月10号 Done 总计表确认 核实总计表数据填写确认。 投放 次月10号 Done 数据回填 次月10日前完成回流回填。 投放 次月10号 Done Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/market-NCPI-sop.html":{"url":"started/operation/market-NCPI-sop.html","title":"投放SOP四（NCPI部分）","keywords":"","body":"投放SOP四（NCPI部分） 工作说明： 投放的操作标准步骤和要求以统一的格式描述出来，用来指导和规范日常工作，投放SOP的最佳效果是随便一个运营投放参照文档做，减少减少出错率 1. 上线前准备 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 核检条件确认 针对非公版渠道需先确定核检条件 投放 对接前2周 FALSE 渠道offer 产品上线前，确认需开启哪几家买量。统一信件给到外部，需同步抄送给UA TEAM ＊通常会先开启BS、NOX、ID雷电、QOO 投放 开启前2周 FALSE 需设定价格及日量。 素材制作时程 部分渠道Resize尺寸较多，尽量提前14个工作天内向美术提出Resize需求。 美术 开启前2周 FALSE 会挑选CB时量成效较好前5名素材进行resize。(依照渠道特性类别有所不同) AF串接设定 于上线前三日发出上线需求信件给厂商，并与AF串接。在群内通知。 投放 开启前3天 FALSE 与渠道串接。 投放 开启前3天 FALSE Click-Through选项拉至30天，复制Tracking Link给渠道端（或是贴在上线需求邮件内） 投放 开启前3天 FALSE 设定回传events ◆ login ◆ complete_registration ◆ tutorial_completion ◆ purchase ◆ level_up 投放 开启前3天 FALSE Permissions全部开启，并点选储存。 投放 开启前3天 FALSE 双平台与渠道商确认是否有AF权限，确认无误即完成串接动作。 投放 开启前3天 FALSE 2. 投放期间 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 次月投放确认 于25号确定下月是否投放。 投放 每月25号 FALSE 3. 结算 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 结算(核检) 于次月10日前完成结算。 投放 次月10号 Done 总计表确认 核实总计表数据填写确认及打勾。 投放 次月10号 Done INVOICE 于次月10日请厂商开出invoice。 投放 次月10号 Done Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/operation/market-LINE-sop.html":{"url":"started/operation/market-LINE-sop.html","title":"投放SOP五（LINE部分）","keywords":"","body":"投放SOP五（LINE部分） 工作说明： 投放的操作标准步骤和要求以统一的格式描述出来，用来指导和规范日常工作，投放SOP的最佳效果是随便一个运营投放参照文档做，减少减少出错率 1. APP上线前准备 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 核检条件确认 结算方式，单价，开放地区，广告露出位置 投放 对接前2周 FALSE 渠道offer确认 统一信件给到外部，需同步抄送给UA TEAM 投放 开启前2周 FALSE 素材制作时程 部分渠道Resize尺寸较多，尽量提前14个工作天内向美术提出Resize需求。 美术 开启前2周 FALSE 会挑选CB时量成效较好前5名素材进行resize。(依照渠道特性类别有所不同) AF串接设定 于上线前三日发出上线需求信件给厂商，并与AF串接。在群内通知。 投放 开启前3天 FALSE 承上 与渠道串接。 投放 开启前3天 FALSE 承上 Click-Through选项拉至30天，复制Tracking Link给渠道端（或是贴在上线需求邮件内） 投放 开启前3天 FALSE 承上 设定回传events ◆ login ◆ tutorial_completion ◆ fristpay ◆ purchase ◆ level_achieved 投放 开启前3天 FALSE 承上 Permissions全部开启，并点选储存。 投放 开启前3天 FALSE 承上 双平台与渠道商确认是否有AF权限，确认无误即完成串接动作。 投放 开启前3天 FALSE 2. 投放期间 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 次月投放确认 于25号确定下月是否投放。 投放 每月25号 FALSE 3. 结算 子类 工作内容 对应部门 完成时间点 状态 负责人 主投确认 验收人 （负责同学填入） 验收时间 （负责同学填入） 备注 结算(核检) 于次月10日前完成结算。 投放 次月10号 FALSE 总计表确认 核实总计表数据填写确认及打勾。 投放 次月10号 FALSE INVOICE 于次月10日请厂商开出invoice。 投放 次月10号 FALSE Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/agreement.html":{"url":"started/agreement.html","title":"隐私政策","keywords":"","body":"隐私政策 本隐私政策旨在向开发者及其终端用户说明我们收集个人信息的类型及我们如何处理和保护个人信息。在注册、接入、使用 SDK 产品和/或服务前，请开发者务必仔细阅读本隐私政策，在确认充分了解并同意后再接入并使用，如果开发者不同意本隐私政策，应立即停止接入及使用 SDK 产品和/或服务。 本隐私政策不适用于接入并使用 SDK 产品和/或服务的开发者在其 App 中处理由其所控制的终端用户个人信息的行为，也不适用于展示在、链接到或再封装我们的产品和/或服务的那些适用第三方隐私政策、并由第三方提供的服务。我们建议终端用户在认真阅读、充分了解并同意 App/相关第三方的隐私政策后，再使用相应的产品/服务。 为了便于开发者及终端用户阅读及理解，我们对关键术语进行了定义，请参见本隐私政策“附录：关键术语定义”。 特别说明： 如果开发者在其 App 中接入并使用 SDK 产品和/或服务，请开发者知悉并承诺： （1）开发者已经遵守并将持续遵守适用的法律、法规、政策和监管要求收集、使用和处理终端用户的个人信息，保护个人信息安全。 （2）开发者已经告知终端用户在其 App 中接入并使用 SDK 产品和/或服务的情况，以及 SDK 对终端用户必要个人信息的收集、使用和保护规则（即本隐私政策），并且已经获得终端用户对于 SDK 收集、使用、处理其个人信息充分、必要且明确的授权同意（包括获取了儿童监护人对提供终端用户是儿童的个人信息的授权同意）。 （3）开发者已经向终端用户提供了易于操作的用户权利实现机制（包括但不限于访问、更正、删除其个人信息，撤销或更改其授权同意范围，注销其个人账号等）。 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"started/access-privacy-table.html":{"url":"started/access-privacy-table.html","title":"国际化对照表","keywords":"","body":"用户隐私权限语言国际化对照表 权限 \\ 语种 简体 繁体 英文 泰语 位置 我们需要获取您的位置，以便您在组队活动中优先匹配附近的玩家，请允许我们获取您的位置. 我們需要獲取您的位置，以便您在組隊活動中優先匹配附近的玩家，請允許我們獲取您的位置. We need your location to match nearby players in team activities,please allow us to get your location. เราต้องการที่ตั้งของคุณ เพื่อให้ตรงกับผู้เล่นที่อยู่ใกล้เคียงในกิจกรรมจัดทีม โปรดอนุญาตให้เรารับที่ตั้งของคุณ 相册 此App需要您的同意，才能访问照片，以便于在游戏中提供【图片保存及分享】的功能，您可以前往系统“设置-隐私”中随时关闭. 此App需要您的同意，才能訪問照片，以便於在遊戲中提供【圖片保存及分享】的功能，您可以前往系統「設置-隱私」中隨時關閉. This App requires your consent to access photos in order to provide the function of [Picture Save and Share] in the game. You can go to the system \"Settings - Privacy\" to close it at any time. แอปนี้ต้องได้รับความยินยอมจากคุณในการเข้าถึงรูปภาพเพื่อให้ฟังก์ชัน [บันทึกและแชร์รูปภาพ] ในเกม คุณสามารถไปที่ระบบ \"การตั้งค่า - ความเป็นส่วนตัว\" เพื่อปิดได้ตลอดเวลา 相机 此App需要您的同意，才能使用相机，以便于在游戏中提供【图片保存及分享】的功能，您可以前往系统“设置-隐私”中随时关闭. 此App需要您的同意，才能使用相機，以便於在遊戲中提供【圖片保存及分享】的功能，您可以前往系統「設置-隱私」中隨時關閉. This App requires your consent to access camera in order to provide the function of [Picture Save and Share] in the game. You can go to the system \"Settings - Privacy\" to close it at any time. แอพนี้ต้องได้รับความยินยอมจากคุณในการเข้าถึงกล้องเพื่อให้ฟังก์ชั่น [บันทึกและแชร์รูปภาพ] ในเกม คุณสามารถไปที่ระบบ \"การตั้งค่า - ความเป็นส่วนตัว\" เพื่อปิดได้ตลอดเวลา ⻨克⻛ 此App需要您的同意，才能使用麦克风，以便于在游戏中体验【语音答题、发送语音聊天】等功能，您可以前往系统“设置-隐私”中随时关闭. 此App需要您的同意，才能使用麥克風，以便於在遊戲中體驗【語音答題、發送語音聊天】等功能，您可以前往系統「設置-隱私」中隨時關閉. This App requires your consent to access microphone in order to provide the function of [voice questions, voice chat] in the game. You can go to the system \"Settings - Privacy\" to close it at any time. แอพนี้ต้องได้รับความยินยอมจากคุณในการเข้าถึงไมโครโฟนเพื่อให้ฟังก์ชั่นของ [คำถามด้วยเสียง, แชทด้วยเสียง] ในเกม คุณสามารถไปที่ระบบ \"การตั้งค่า - ความเป็นส่วนตัว\" เพื่อปิดได้ตลอดเวลา 广告追踪 通过获取IDFA的访问权限，提供更好、更安全的个性化服务和内容。未经允许，我们不会将其用于其他目的. 通過獲取IDFA的訪問權限，提供更好、更安全的個性化服務和內容。未經允許，我們不會將其用於其他目的. Provide better and more secure personalised services and content by gaining access to IDFA. We will not use it for other purposes without permission. ให้บริการและเนื้อหาส่วนบุคคลที่ดีขึ้นและปลอดภัยยิ่งขึ้นด้วยการเข้าถึง IDFA เราจะไม่ใช้เพื่อวัตถุประสงค์อื่นโดยไม่ได้รับอนุญาต Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/login/overview.html":{"url":"core/login/overview.html","title":"功能介绍","keywords":"","body":"业务介绍 [!TIP|label:Tips] 为了访问 RocGmaes Developer Services（以下简称 RDS）的相关服务功能，你的用户需要拥有一个 RDS 账号。 如果用户未使用 RDS 账号，你的应用在调用 RDS 服务 API 时可能会遇到错误。本文档介绍了如何在你的应用中实现 RDS 登录。 RDS 账号服务是基于标准的 OAuth 2.0 协议构建的授权登录系统，为开发者提供了简单、安全、快速的账号登录授权功能，为用户免去输入账号密码的繁琐步骤，让用户只需一键通过 RDS 账号授权，即可使用你的应用。 在取得用户授权之后，开发者可以通过接口调用的方式获得 RDS 用户的相关公开信息，包括用户昵称、头像等，可用于提高应用的用户体验。 前期工作 请确认已经在 开发者中心 > 应用配置 完成了开启操作。可参照入门指南中的准备工作。 功能接入 接入 RDS 登录有两种方式： 基于内建账户系统接入 RDS 登录； 单纯 RDS 用户认证。 第一种方式是我们推荐的方式，一般适用于以下场景： 希望直接使用 SDK 提供的账户系统 希望将更多第三方账号（比如 QQ、微信、Apple 等）绑定到玩家账号上 希望使用 SDK 的好友、成就等基于内建账户系统的服务和功能 相反，如果你的游戏自己实现了账户系统，也不打算使用好友、成就等 SDK 提供的其他功能，仅仅需要接入「用户登录」功能，那么可以考虑使用第二种方式。 我们首先介绍第一种方式，然后介绍第二种方式。 无论使用哪种方式，首先都需要在 开发者中心 > 游戏服务 > 功能接入 开启「登录」。 1.SDK 获取及初始化 参考 快速开始 创建应用、完成 项目配置 和 初始化。 2.检查登录状态 SDK 会在本地缓存当前用户的登录信息，所以如果一个玩家在游戏内登录之后，下次启动用户通过调用如下方法可以得到之前登录的账户实例。 缓存不会自动清除。此时玩家无需再次登录，可以直接进入游戏，实现静默登录。 如果玩家在游戏内进行了登出或者玩家手动清除了游戏的存储数据，则本地缓存的登录信息也会被删除，下次进入游戏时调用如下方法会返回一个 null 对象，玩家需要登录之后再进入游戏。 3.静默登录 静默登录可以帮助用户跳过登录的流程，通常用于用户下一次启动游戏时，仍需之前登录状态的场景。 当用户启动游戏时，你可以尝试检查用户是否已经在当前设备上登录、登录信息是否仍有效。 使用内建账户方式，参考检查登录状态。 使用单纯 RDS 登录，参考检查登录状态和用户信息。 这样可以尝试在不显示登录按钮或界面的情况下帮用户完成登录过程。 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/login/access-and.html":{"url":"core/login/access-and.html","title":"Android","keywords":"","body":"集成SDK功能 MyExternalInterface.getInstance().isStartLog(true);//TAG: mySDK 在启动activity里oncreate加上,可以开启日志调试，正式上线包需要改成false 1.在自己的Application onCreate里调用 MyExternalInterface.getInstance().APPInit(Application application,boolean isProduction); 参数：isProduction：传入运行的环境 true 表示正式环境 production false 表示测试环境sandbox 注意：正式上线包一定要把环境改成true 2. 初始化SDK 接口定义： public void SDKInit(Activity activity,String gameId,String appkey,String channelId,SDKInterfaceInitListener initListener) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 gameId String 游戏ID appkey String 游戏加密密钥 channelId String 渠道 ID，目前固定为“GP” initListener SDKInterfaceInitListener 初始化回调接口 2. 调用示例代码 MyExternalInterface.getInstance().SDKInit(MainActivity.this, GAMEID, SIGN_KEY, CHANNELID, new SDKInterfaceInitListener() { @Override public void initSuccess(String result) { Log.d(TAG, \"SDKInitsuccese-result====\" + result); if(result.equals(\"true\")){ //同意了协议直接登录 login(); }else{ //没有同意协议调用协议界面 MyExternalInterface.getInstance().SDKProtocol(MainActivity.this, new BaseListener() { @Override public void onSuccess(int code, String msg) { //同意协议 login(); } @Override public void onFail(int code, String msg) { Log.d(TAG,\"不同意协议 code=\"+code); } }); } } @Override public void initFail(String result) { Log.d(TAG, \"SDKInitfail-result====\" + result); } }); 3. 登录 接口定义： public void SDKLogin(Activity activity,SDKLoginListener listener) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 listener SDKLoginListener 登录的回调 2. 接口回调说明 登录成功回调 public void onSuccess(int code, SdkLogincallBack sdkLogincallBack) sdkLogincallBack中会得到登录验证时所需要的参数 参数名 类型 参数说明 gameSign string 登录成功后，得到的加密字符串 loginTime string 用户登录的时间 uid String 用户的uid（⚠️请用该ID和游戏数据做关联对应） subId String Yeeha平台子账号subId mainId String Yeeha平台id（可能为空） token string 主平台token username String 用户名 loginWay String 登录的方式 1:游客登录 2:Fb登录 3:账号密码登录 4:Twitter登陆 5：自动登录 6：Google登录 fbBind String 0表示没有绑定，1表示绑定了 twitterBind String 0表示没有绑定，1表示绑定了 3. 调用示例代码 MyExternalInterface.getInstance().SDKLogin(MainActivity.this, new SDKLoginListener() { @Override public void onSuccess(int code, SdkLogincallBack sdkLogincallBack) { String gameSign = sdkLogincallBack.gameSign; String loginTime = sdkLogincallBack.loginTime; String uid = sdkLogincallBack.uid; String username = sdkLogincallBack.username; String loginWay = sdkLogincallBack.loginWay; String fbBind = sdkLogincallBack.fbBind; String twitterBind = sdkLogincallBack.twitterBind; String subId = sdkLogincallBack.subId; String mainId = sdkLogincallBack.mainId; String token = sdkLogincallBack.token; Log.d(TAG, \"gameSign==\" + gameSign + \"\\nloginTime==\" + loginTime + \"\\nuid==\" + uid + \"\\nusername==\" + username + \"\\nloginWay==\" + loginWay + \"\\nfbBind==\" + fbBind + \"\\ntwitterBind==\" + twitterBind+ \"\\nsubId==\" + subId+ \"\\nmainId==\" + mainId + \"\\ntoken==\" + token); } @Override public void onFail(int code, String msg) { Log.d(TAG, \"code==\" + code + \"\\nmsg==\" + msg); } }); 4. 实现onActivityResult 方法 @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { MyExternalInterface.getInstance().onActivityResult(MainActivity.this, requestCode, resultCode, data, new BaseListener() { @Override public void onSuccess(int code, String msg) { } @Override public void onFail(int code, String msg) { } }); } 3.账号管理界面 接口定义： public void SDKAccountManage(Activity activity, SDKInterfaceExitListener exitListener) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 listener SDKInterfaceExitListener 切换账号的回调 2. 调用示例代码 MyExternalInterface.getInstance().SDKAccountManage(this, new SDKInterfaceExitListener() { @Override public void exitSuccess(String result) { //点了切换账号确定接口，游戏需要返回登录界面，再次调用sdk登录 BaseSDKUtils.logD(TAG,\"exitSuccess====\"+result); sdkLogin(); } @Override public void exitFail(String result) { } }); 4.生命周期方法 1. 调用示例代码 在Activity的onStart里调用 MyExternalInterface.getInstance().onStart(MainActivity.this, \"\"); 在Activity的onStop里调用 MyExternalInterface.getInstance().onStop (MainActivity.this, \"\"); 在activity的onDestroy里调用 MyExternalInterface.getInstance().onDestroy(MainActivity.this); 5.Firebase推送 1.在Firebase创建的应用下载json文件 在AndroidManifest.xml 的application节点下加入 2.在 Android 13+ 上请求运行时通知权限 Android 13 引入了用于显示通知的新运行时权限。这会影响在 Android 13 或更高版本上运行且使用 FCM 通知的所有应用。 默认情况下，FCM SDK（23.0.6 或更高版本）包含清单中定义的POST_NOTIFICATIONS权限。但是，您的应用还需要通过常量android.permission.POST_NOTIFICATIONS请求此权限的运行时版本。在用户授予此权限之前，您的应用将无法显示通知。 在请求权限的方法中判断Android版本13+以上加上请求通知的权限 Manifest.permission.POST_NOTIFICATIONS // This is only necessary for API level >= 33 (TIRAMISU) if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) 6.配置Google登录 拷贝credentials.json文件放在同样的目录位置 和Facebook配置一样，具体值写在string.xml里 7.关于混淆 如果开启了混淆 minifyEnabled 是true，则需要在proguard-rules加入以下代码 #---------------------------------MySDK--------------------------------- -keepclassmembers class com.myBest.sdk.utils.JsInterationUtils { ; } -dontwarn com.facebook.** -keep class com.facebook.** { *; } -dontwarn com.google.** -keep class com.google.** { *; } #okhttp3.x -dontwarn okhttp3.** -keep class okhttp3.** { *;} -dontwarn okio.** #retrofit -dontwarn retrofit.** -keep class retrofit.** { *; } -keepattributes Signature -keepattributes Exceptions -dontwarn okio.** #retrofit2.x -dontwarn retrofit2.** -keep class retrofit2.** { *; } -keepattributes Signature -keepattributes Exceptions #--------------------------Adjust------------------------------- -keep public class com.adjust.sdk.** { *; } -keep class com.google.android.gms.common.ConnectionResult { int SUCCESS; } -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient { com.google.android.gms.ads.identifier.AdvertisingIdClient$Info getAdvertisingIdInfo(android.content.Context); } -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info { java.lang.String getId(); boolean isLimitAdTrackingEnabled(); } -keep class dalvik.system.VMRuntime { java.lang.String getRuntime(); } -keep class android.os.Build { java.lang.String[] SUPPORTED_ABIS; java.lang.String CPU_ABI; } -keep class android.content.res.Configuration { android.os.LocaleList getLocales(); java.util.Locale locale; } -keep class android.os.LocaledList { java.util.Locale get(int); } -keep public class com.android.installreferrer.** { *; } #--------------------------Adjust------------------------------- ################### region for xUtils -keepattributes Signature,*Annotation* -keep public class org.xutils.** { public protected *; } -keep public interface org.xutils.** { public protected *; } -keepclassmembers class * extends org.xutils.** { public protected *; } -keepclassmembers @org.xutils.db.annotation.* class * {*;} -keepclassmembers @org.xutils.http.annotation.* class * {*;} -keepclassmembers class * { @org.xutils.view.annotation.Event ; } #################### end region ##---------------Gson ---------- # Gson uses generic type information stored in a class file when working with fields. Proguard # removes such information by default, so configure it to keep all of it. -keepattributes Signature # For using GSON @Expose annotation -keepattributes *Annotation* # Gson specific classes -keep class sun.misc.Unsafe { *; } #-keep class com.google.gson.stream.** { *; } ##---------------Gson ---------- # Application classes that will be serialized/deserialized over Gson #---------------------------------实体类--------------------------------- -keep class com.myBest.sdk.Javabean.** { *; } -keep class com.myBest.sdk.Interfaces.** { *; } -keep class com.myBest.sdk.listener.** { *; } -keep class com.android.vending.billing.** { *; } -keep class com.myBest.sdk.helpers.MyInputMapProvider{ *; } #---------------------------------MySDK--------------------------------- Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/login/access-ios.html":{"url":"core/login/access-ios.html","title":"IOS","keywords":"","body":"iOS登录 SDK支持多种登录方式 游客登录 苹果登录 Facebook登录 Yeeha平台邮箱登录 登录实现 1. SDK初始化 1.1 初始化接口调用 在 - (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(nullable NSDictionary )launchOptions 方法中调用 接口参数说明: 参数 类型 说明 isProduction bool 线上为 YES , 测试为NO, ⚠️提审时需设置为YES 示例代码: - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { // Override point for customization after application launch. [[ROCSdkManager manager] initConfig:isProduction application:application launchOptions:launchOptions]; return YES; } 1.2 回调注册 在 - (BOOL)application:(UIApplication )app openURL:(NSURL )url options:(NSDictionary *)options 方法中调用 示例代码: - (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options API_AVAILABLE(ios(9.0)){ BOOL log = [[ROCSdkManager manager] application:app openURL:url options:options]; return log; } 2. 登录模块 2.1 展示登录界面 界面中含有登录、注册、忘记密码功能。 账号的切换、注销请参考 3. 账号管理模块 [ROCSdkManager showLogin]; 2.2 登录事件回调 登录失败 SDK 已做提示功能, 无需再做处理 返回键值对对象dic，包含字段如下: 参数 类型 说明 username 字符串 账号username uid 字符串 账号uid ⚠️请用该ID和游戏数据做关联对应 subId 字符串 Yeeha平台子账号ID mainId 字符串 Yeeha平台ID gameSign 字符串 登录验证用 loginTime 字符串 登录验证用 token 字符串 登录验证用 loginWay 字符串 登录方式 0:apple登录 1:游客登录 2:Fb登录 3:账号密码登录 fbBind 字符串 0:未绑定 1:已绑定 twitterBind 字符串 0:未绑定 1:已绑定 [ROCSdkManager manager].loginSuccessBlock = ^(NSDictionary * _Nonnull dic) { NSLog(@\"登录成功:%@\",dic); }; 2.3 登录界面移除 登录成功SDK会自动移除界面，所以通常用不到这个接口 [ROCSdkManager removeLoginVC]; 3. 账号管理模块 3.1 展示账号管理界面 界面中含有修改密码、绑定邮箱、绑定Facebook、账号的切换和注销功能 [ROCSdkManager showAcc]; 3.2 事件回调 3.2.1 切换账号回调 玩家已确认切换账号，需要对接方实现游戏的初始化工作，初始化到刚启动应用时的状态 玩家删除账号也走该回调，不需要额外处理逻辑，同切换账号一套处理代码即可 [ROCSdkManager manager].changeAccBlock = ^{ NSLog(@\"确认了要切换账号\"); }; 3.2.2 关闭账号管理界面回调 玩家关闭了账号管理界面，通常用不到这个回调 [ROCSdkManager manager].closeAccVCompleteBlock = ^{ NSLog(@\"关闭账号管理界面\"); }; Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/login/access-php.html":{"url":"core/login/access-php.html","title":"服务端","keywords":"","body":"登录 1. 登录说明 原生游戏对接Android、IOS的SDK获取用户信息进行校验并进入游戏。H5游戏需要提供游戏入口地址(LoginUrl)，平台拼接用户信息，游戏验证信息并进入游戏。加密签名AppKey由平台提供，用于交互数据签名校验。 2. 参数说明 参数 类型 是否参与签名 说明 uid int 是 用户id time int 是 登录时间戳 channel string 是 登录渠道 subId string 是 Yeeha平台子账号Id（唯一id） mainId string 是 Yeeha平台UID（可能为空） token string 否 Yeeha平台登录token sign string 否 加密串 3. 加密方式 示例代码: $sign = md5($uid . $time . $subId . $mainId . $AppKey); 4. H5游戏登录示例 LoginUrl?uid=1000000&time=1589339441&subId=998612205984587798&mainId=1000001&channel=GP&sign=0a9f7072d945d2f1bad594406dbae8fb Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/login/simple-login.html":{"url":"core/login/simple-login.html","title":"简单登录","keywords":"","body":"简单认证 如果你仅仅只需要接入这一种登录方式，确认不使用 RDS 其他云服务，可以看这里的文档。请注意，如果刚开始只选择接入「 登录」，后面又需要使用其他云服务的话，后期可能有一定的升级成本。 使用原来 SDK v1.x 版本的开发者，也可以参考这里的说明来完成 SDK 的升级。 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/login/best-practice.html":{"url":"core/login/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 登录流程 玩家在登录时，操作的步骤越少，路径越短，则转化率越高。建议使用相对简短的引导，保留必要的步骤，让玩家能快速进入游戏。 登录界面 为玩家提供 登录按钮 ，按照登录设计指南绘制，并参考功能介绍 中单个登录与多个登录的展现方式。 Checklist 向玩家提供登录功能前，开发者需要测试登录流程是否正常完成，检查以下事项： 游戏是否达到 SDK 环境要求。 开发者是否了解 SDK 中两种 登录方式，并选择了适合游戏的一种。参考接入 登录。 是否在 开发者后台填写了 Android 平台或 iOS 平台相关配置。参考配置签名证书和格式要求。 测试用户是否具备相关权限。参考测试用户管理。 在未安装 客户端的设备上打开游戏，是否能以 WebView 方式完成登录流程，是否能获取玩家授权的基本信息。 在安装了最新版 客户端的设备上打开游戏，是否能拉起 客户端完成登录流程，是否能获取玩家授权的基本信息。 登录授权完成后，退出游戏再次进入，是否可以静默登录。 登录授权未完成就退出游戏，或者点了取消，再次进入游戏，是否能重新开始登录流程。 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/pay/overview.html":{"url":"core/pay/overview.html","title":"功能介绍","keywords":"","body":"支付功能介绍 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/pay/access-and.html":{"url":"core/pay/access-and.html","title":"Android","keywords":"","body":"Google应用内充值 接口定义： public void SDKPay(Activity activity, SdkPayInfo sdkPayInfo,String paySource) 1. 接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 sdkPayInfo SdkPayInfo 充值的信息对象 paySource String 充值渠道，Google为“GP” SdkPayInfo对象说明 参数名 类型 参数说明 productId String 充值的商品id，与google后台配置的一致 serverId String 充值的区服号 uid String 充值的用户uid shopId String 充值的内部商品id，自己游戏内部用的id roleId String 游戏内的角色id level String 角色等级 amount String 充值的金额（货币单位：美金） extra String 额外的参数(可选，数据会原样返回给服务端) 2. 调用示例代码 public String PAYSOURCEID = \"GP\";//Google支付为GP SdkPayInfo sdkPayInfo = new SdkPayInfo(); sdkPayInfo.productId = \"diamonds0.99\"; sdkPayInfo.serverId = \"1\"; sdkPayInfo.uid = \"10000\"; sdkPayInfo.shopId = \"301\"; sdkPayInfo.roleId = \"123\"; sdkPayInfo.level = \"5\"; sdkPayInfo.amount = \"0.99\"; sdkPayInfo.extra=\"123\"; MyExternalInterface.getInstance().SDKPay(this, sdkPayInfo,PAYSOURCEID); Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/pay/access-ios.html":{"url":"core/pay/access-ios.html","title":"IOS","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 IOS登录 页面 iOS 支付 apple内购支付 1. 支付拉起 请先初始化 SDK 可参考 IOS登录 SDK已做订单单比化(一单结束才能进行下一单)，无需再做遮罩层。 已做客户端自动补单功能，掉单后且没有提示发货相关的错误提示时(如:发货失败、重复的订单等)，可重启应用进行自动补单。 接口对象包含字段说明: 参数 类型 说明 productId 字符串 传苹果内购ID serverid 字符串 游戏区服ID 没有就传字符串@\"1\"） amount 字符串 订单金额 (⚠️传 美金) uid 字符串 登陆成功时返回的UID shopid 字符串 游戏方自己的商品ID roleid 字符串 游戏角色ID extension 字符串 透传参数，会原样返回给你们（没有就传字符串@\"\"） 调用示例如下: [ROCSdkManager pay:@{@\"productId\":@\"com.game.brast.iap.tier4\", @\"serverid\":@\"1299999\", @\"amount\":@\"3.99\", @\"uid\":@\"1000090\", @\"shopid\":@\"104\", @\"roleid\":@\"1000025\", @\"extension\":@\"ff2e71064fde4f588c127f215df0aabb\", }]; Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/pay/access-php.html":{"url":"core/pay/access-php.html","title":"游戏充值","keywords":"","body":"游戏充值 1. 充值说明 玩家在游戏内发起购买商品操作时，当支付完毕，平台服务端会调用游戏方提供的充值回调地址（PaymentUrl）进行通知物品发放，请游戏方确保该笔订单只成功发放一次。加密签名AppKey由平台提供，用于交互数据签名校验。 2. 参数说明 参数 类型 是否参与签名 说明 uid int 是 用户id price string 是 充值金额 serverId int 是 区服ID roleId string 是 角色ID shopId int 是 商品ID orderId string 是 订单号 channel string 是 登录渠道 payTime int 是 付款时间戳 extra string 是 透传参数（可为空） sign string 否 加密串 3. 加密方式 示例代码: $sign = md5($uid . $price . $serverId . $roleId . $shopId . $orderId . $channel . $payTime . $extra . $AppKey); 4. 游戏物品发放示例 PaymentUrl?uid=1000000&price=0.99&serverId=1&roleId=1000000000001&shopId=100&orderId=gp100000000000000000&channel=GP&payTime=1589339441&extra=100000000000&sign=0a9f7072d945d2f1bad594406dbae8fb 5. 返回结果 发货成功code=1，发货失败code=0。 { \"code\": 1, \"msg\": \"发货成功|重复发货\" } Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/recharge/access-php.html":{"url":"core/recharge/access-php.html","title":"官网储值","keywords":"","body":"官网储值 1. 储值说明 玩家在官网进行储值，根据游戏提供查询区服列表（ServerListUrl）和 角色信息地址（CheckUserUrl），获取角色信息发起三方支付。加密签名AppKey由平台提供，用于交互数据签名校验。 2. 区服列表 { \"serverList\": [{ \"serverId\": 1, \"serverName\": \"S1\" }, { \"serverId\": 2, \"serverName\": \"S2\" }] } 3. 查询角色参数说明 参数 类型 是否参与签名 说明 serverId int 是 区服ID roleName string 是 角色名 sign string 否 加密串 3. 加密方式 示例代码: $sign = md5($serverId. $roleName . $AppKey); 4. 角色查询示例 CheckUserUrl?serverId=1&roleName=abc&sign=0a9f7072d945d2f1bad594406dbae8fb 5. 返回结果 查询成功code=1，查询失败code=0。 { \"code\": 1, \"msg\": \"查询成功\", \"data\": { \"uid\": 1000000, \"roleId\": \"1000000000001\" } } Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/pay/simple-pay.html":{"url":"core/pay/simple-pay.html","title":"简单支付","keywords":"","body":"支付 readme Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/pay/best-practice.html":{"url":"core/pay/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 支付流程 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/share/access-android.html":{"url":"core/share/access-android.html","title":"Android","keywords":"","body":"Facebook 分享功能 请先初始化 SDK 可参考 Android登录 Android 11,需要在 AndroidMainfest.xml 加上下面内容，不然可能会分享不了图片: ... 1.Facebook分享链接 接口定义： public void SDKFacebookShare(Activity activity, ShareInfo shareInfo, SDKInterfaceShareListener callback) a.接口参数说明 参数名 类型 参数说明 activity Activity 上下文实例 shareInfo ShareInfo 分享的信息对象 callback SDKInterfaceShareListener 分享的回调 ShareInfo对象说明 参数名 类型 参数说明 andLink String 分享的链接 dsp String 分享的描述信息 uid String 用户uid serverId String 服务器id roleId String 游戏内的角色id shareId String 分享点所在位置id（具体值具体定义） b.分享回调说明 msg = \"0\"; 为分享成功状态，回调shareSuccess msg = \"1\", 为分享失败状态, 回调shareFail msg =\"2\";为分享取消状态，回调shareFail msg =\"3\";为用户没有安装Facebook app，回调shareFail c.调用示例代码 ShareInfo shareInfo = new ShareInfo(); shareInfo.andLink = \"https://www.baidu.com\"; shareInfo.dsp = \"测试分享\"; shareInfo.uid = \"10000\"; shareInfo.serverId = \"1\"; shareInfo.roleId = \"123\"; shareInfo.shareId = \"maipage\"; MyExternalInterface.getInstance().SDKFacebookShare(this, shareInfo, new SDKInterfaceShareListener() { @Override public void shareSuccess(String s) { Log.d(TAG, \"s==\" + s); } @Override public void shareFail(String s) { Log.d(TAG, \"s==\" + s); } }); 2.Facebook分享本地视频 接口定义： public void SDKFacebookShareVideo (Activity activity, ShareInfo shareInfo,File videoFile, SDKInterfaceShareListener callback) 参数名 类型 参数说明 activity Activity 上下文实例 shareInfo ShareInfo 分享的信息对象 videoFile File 传入本地视频的File目录 callback SDKInterfaceShareListener 分享的回调 ShareInfo对象说明 参数名 类型 参数说明 uid String 用户uid serverId String 服务器id roleId String 游戏内的角色id shareId String 分享点所在位置id（具体值具体定义） a.调用示例代码 File dir = this.getExternalFilesDir(\"video\"); File loadingvideo = new File(dir, \"shareVideo.mp4\"); ShareInfo shareInfo = new ShareInfo(); shareInfo.uid = \"10000\"; shareInfo.serverId = \"1\"; shareInfo.roleId = \"123\"; shareInfo.shareId = \"maipage\"; MyExternalInterface.getInstance().SDKFacebookShareVideo (this,shareInfo,loadingvideo,new SDKInterfaceShareListener(){ @Override public void shareSuccess(String s) { Log.d(TAG, \"s==\" + s); } @Override public void shareFail(String s) { Log.d(TAG, \"s==\" + s); } }); 3.Facebook分享图片 -用户必须安装 7.0 或更高版本的原生 Android 版 Facebook 应用才能分享。 接口定义： public void SDKFacebookSharePicture (Activity activity, ShareInfo shareInfo, Bitmap imageBitmap, SDKInterfaceShareListener callback) 参数名 类型 参数说明 activity Activity 上下文实例 shareInfo ShareInfo 分享的信息对象 imageBitmap Bitmap 传入图片的bitmap callback SDKInterfaceShareListener 分享的回调 ShareInfo对象说明 参数名 类型 参数说明 uid String 用户uid serverId String 服务器id roleId String 游戏内的角色id shareId String 分享点所在位置id（具体值具体定义） a.调用示例代码 File dir = this.getExternalFilesDir(\"picture\"); File sharePicture = new File(dir, \"sharePicture.png\"); Uri uri = Uri.fromFile(sharePicture); Bitmap bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), uri); ShareInfo shareInfo = new ShareInfo(); shareInfo.uid = \"10000\"; shareInfo.serverId = \"1\"; shareInfo.roleId = \"123\"; shareInfo.shareId = \"maipage\"; MyExternalInterface.getInstance().SDKFacebookSharePicture (this,shareInfo, bitmap,new SDKInterfaceShareListener(){ @Override public void shareSuccess(String s) { Log.d(TAG, \"s==\" + s); } @Override public void shareFail(String s) { Log.d(TAG, \"s==\" + s); } }); Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/share/access-ios.html":{"url":"core/share/access-ios.html","title":"iOS","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 IOS登录 页面 iOS分享 facebook分享 1. 图片分享 请先初始化 SDK 可参考 IOS登录 照片大小必须小于 12MB 用户需要安装版本 7.0 或以上的原生 iOS 版 Facebook 应用 接口对象包含字段说明: 参数 类型 说明 img 字符串 分享的图片 dic NSDictionary 需要携带的额外参数对象 block 分享回调 0:分享成功 1:分享失败 2:分享取消 3:未安装FBAPP dic对象参数所包含的字段: 参数 类型 说明 uid 字符串 登陆成功时返回的UID serverid 字符串 服务器ID 没有传@\"1\" playerid 字符串 为游戏内角色ID channelid 字符串 为游戏内角色ID iOS:@\"AS\",安卓:@\"GP\" share_id 分享回调 分享ID 用于区分是哪个位置的分享 + (void)shareImage:(UIImage *)img analyticsDic:(NSDictionary *)dic callBackBlcok:(void (^)(NSString *))block; 调用示例: [ROCSdkManager shareImage:image analyticsDic:@{@\"uid\":@\"xxxx\", @\"serverid\":@\"xxxxx\", @\"playerid\":@\"xxxxx\", @\"share_id\":@\"xxxxx\"} callBackBlcok:^(NSString * _Nonnull type) { switch ([type intValue]) { case 0:{ NSLog(@\"分享成功\"); }break; case 1:{ NSLog(@\"分享失败\"); }break; case 2:{ NSLog(@\"分享取消\"); }break; case 3:{ NSLog(@\"未安装FBAPP\"); }break; default:break; } }]; 2. 链接分享 请先初始化 SDK 可参考 IOS登录 链接格式如: https://www.baidu.com 接口对象包含字段说明: 参数 类型 说明 link 字符串 要分享的链接 dsp 字符串 分享内容描述 dic NSDictionary 需要携带的额外参数对象 block 分享回调 0:分享成功 1:分享失败 2:分享取消 3:未安装FBAPP dic对象参数所包含的字段: 参数 类型 说明 uid 字符串 登陆成功时返回的UID serverid 字符串 服务器ID 没有传@\"1\" playerid 字符串 为游戏内角色ID channelid 字符串 为游戏内角色ID iOS:@\"AS\",安卓:@\"GP\" share_id 分享回调 分享ID 用于区分是哪个位置的分享 + (void)shareLink:(NSString *)link dsp:(NSString *)dsp analyticsDic:(NSDictionary *)dic callBackBlcok:(void (^)(NSString *))block 调用示例: [ROCSdkManager shareLink:@\"https://developers.facebook.com\" dsp:@\"测测测\" analyticsDic:@{@\"uid\":@\"xxxx\", @\"serverid\":@\"xxxx\", @\"playerid\":@\"xxxx\", @\"share_id\":@\"xxxx\"} callBackBlcok:^(NSString * _Nonnull type) { switch ([type intValue]) { case 0:{ NSLog(@\"分享成功\"); }break; case 1:{ NSLog(@\"分享失败\"); }break; case 2:{ NSLog(@\"分享取消\"); }break; case 3:{ NSLog(@\"未安装FBAPP\"); }break; default:break; } }]; 3. 视频分享 请先初始化 SDK 可参考 IOS登录 分享内容的用户应安装版本 26.0 或以上的 iOS 版 Facebook 客户端 视频大小必须小于 50MB 接口对象包含字段说明: 参数 类型 说明 videoAsset PHAsset 照片库中的视频的相位集 videoUrl NSURL 照片库中的视频的相位集 previewImg 分享回调 视频预览图 dic NSDictionary 需要携带的额外参数对象 block 分享回调 0:分享成功 1:分享失败 2:分享取消 3:未安装FBAPP dic对象参数所包含的字段: 参数 类型 说明 uid 字符串 登陆成功时返回的UID serverid 字符串 服务器ID 没有传@\"1\" playerid 字符串 为游戏内角色ID channelid 字符串 为游戏内角色ID iOS:@\"AS\",安卓:@\"GP\" share_id 分享回调 分享ID 用于区分是哪个位置的分享 + (void)shareVideo:(nonnull PHAsset *)videoAsset previewPhoto:(nullable UIImage *)previewImg analyticsDic:(NSDictionary *)dic callBackBlcok:(void (^)(NSString *))block; //或 + (void)shareVideoUrl:(nonnull NSURL *)videoUrl previewPhoto:(nullable UIImage *)previewImg analyticsDic:(NSDictionary *)dic callBackBlcok:(void (^)(NSString *))block; 调用示例: [ROCSdkManager shareVideoUrl:videoAssetURL previewPhoto:image analyticsDic:@{@\"uid\":@\"xxxx\", @\"serverid\":@\"xxxx\", @\"playerid\":@\"xxxx\", @\"share_id\":@\"xxxx\"} callBackBlcok:^(NSString * _Nonnull type) { switch ([type intValue]) { case 0:{ NSLog(@\"分享成功\"); }break; case 1:{ NSLog(@\"分享失败\"); }break; case 2:{ NSLog(@\"分享取消\"); }break; case 3:{ NSLog(@\"未安装FBAPP\"); }break; default:break; } }]; Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/notice/overview.html":{"url":"core/notice/overview.html","title":"功能介绍","keywords":"","body":"公告功能介绍 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/notice/access-and.html":{"url":"core/notice/access-and.html","title":"Android","keywords":"","body":"集成SDK功能 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/notice/access-ios.html":{"url":"core/notice/access-ios.html","title":"IOS","keywords":"","body":"iOS Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/notice/simple-notice.html":{"url":"core/notice/simple-notice.html","title":"简单支付","keywords":"","body":"公告系统的简单实现 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/notice/best-practice.html":{"url":"core/notice/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 拉取公告流程 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/gift/overview.html":{"url":"modules/gift/overview.html","title":"功能介绍","keywords":"","body":" table{ margin: initial; } 礼包功能介绍 礼包兑换流程 礼包表结构 游戏表 Table：azura_game name type 说明 备注 id int(10) ID gameName string(32) 游戏名称 gameNo string(16) 游戏编号 createdAt int(10) 创建时间 updatedAt int(10) 更新时间 deletedAt int(10) 删除时间 礼包表 Table：azura_game_gift name type 说明 备注 id int(10) ID gameId int(10) 游戏ID giftName string(32) 礼包名称 exchangeCeiling tinyint(3) 单账号兑换上限 默认1 同一个礼包多张券可兑换限制 receiveGrade tinyint(3) 领取等级 0不限制 giftConf string(128) 礼包配置 exchangeUrl string(196) 礼包兑换接口 游戏提供兑换API createdAt int(10) 创建时间 updatedAt int(10) 更新时间 deletedAt int(10) 删除时间 礼包批次表 Table：azura_game_gift_batch name type 说明 备注 id int(10) ID gameId int(10) 游戏ID giftName string(32) 礼包名称 exchangeCeiling tinyint(3) 单账号兑换上限 默认1 同一个礼包多张券可兑换限制 receiveGrade tinyint(3) 领取等级 0不限制 giftConf string(128) 礼包配置 exchangeUrl string(196) 礼包兑换接口 游戏提供兑换API giftId int(10) 礼包ID batchName string(32) 批次名称 isPublic tinyint(3) 通用礼包码 1通过 0不通用 num smallint(5) 礼包码数量 startTime int(10) 礼包开始时间 endTime int(10) 礼包过期时间 status tinyint(3) 状态 状态 0待生成、1成功、2生成中 createdAt int(10) 创建时间 updatedAt int(10) 更新时间 deletedAt int(10) 删除时间 礼包码表 Table：azura_game_gift_code name type 说明 备注 id int(10) ID gameId int(10) 游戏ID giftId int(10) 礼包ID batchId int(10) 批次ID code string(16) 兑换码 exRoleId string(32) 兑换角色ID exRoleServer string(32) 兑换区服 exRoleNick string(64) 兑换角色昵称 exRoleGrade int(10) 兑换角色等级 exTime int(10) 兑换时间 status tinyint(3) 状态 0待兑换、1兑换成功、2兑换失败 createdAt int(10) 创建时间 updatedAt int(10) 更新时间 deletedAt int(10) 删除时间 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/gift/switch-api.html":{"url":"modules/gift/switch-api.html","title":"API","keywords":"","body":"礼包兑换服务API接口 table{ margin: initial; } 一、文档说明 1.1 修订记录 日期 修订内容 说明 2022-11-15 v1.0.0 版本文档完成 二、报文格式 请求方式: POST 编码格式: application/json 响应结构: JSON 2.1 请求地址 key value 说明 URL http://m-uat.roc.games/api 测试环境 URL 生成环境 2.2 接口响应说明 2.2.1 成功 { \"success\": true, \"errCode\": 0, \"errMsg\": \"SUCCESS\", \"data\":{} } 2.2.2 失败 { \"success\": false, \"data\": {}, \"errCode\": \"-100001\", \"errMsg\": \"Validation errors\" } 2.3 签名机制 2.3.1 概述 系统使用MD5签名验签技术保障双方的身份可靠性和数据完整性。 对于报文的签名处理机制如下： （1）将报文除签名域（sign）外的所有取值不为空（空是指null或\"\",不包含\"null\"和 空格）的数据元，按照报文域第一个字符的键值ASCII码递增排序（字母升序排序），如果遇到相同字符则按照第二个字符的键值ASCII码递增排序，依次类推。 （2）将排序后的数据元与其对应值，组合成“参数=参数值”的格式，并把这些参数用&字符连接起来，此时生成的字符串作为待签名的字符串。 （3）对待签名字符串追加&key=signKey，使用MD5算法做摘要。 （4）将生成的签名赋值给sign报文域，拼接到请求报文中。 2.3.2 签名 signKey key value 说明 signKey 签名 signKey 2.3.3 加密方式 待签名数据 { \"role_id\":\"角色ID\", \"role_server\":\"游戏区服\", \"prop\":[ { \"name\":\"道具名称\", \"num\":\"1\" } ], \"order_id\":\"订单ID\", \"channel\":\"渠道\", \"extra\":\"扩展信息\", \"sign\":\"签名\" } 拼装成待验签的字符串如下 $string = 'channel=渠道&exOrderId=订单ID&extra=扩展信息&prop=[{\"name\":\"道具名称\",\"num\":\"1\"}]&roleId=角色ID&roleServer=游戏区服&key=4b275ac216d7d8385206c9766485db6f'; md5签名 $sign = md5($string); 三、使用礼包码 3.1 请求地址 URL：/gift/codeUse 3.2 请求参数 字段 类型 必填 说明 签名 gameId int 是 游戏编号 Y exCode string 是 礼包码 Y roleId int 是 角色ID Y roleServer int 是 角色区服ID Y roleGrade int 是 角色等级 Y sign string 是 签名 N 3.3 请求示例 { \"gameId\":\"1015\", \"exCode\":\"CXPIYFLW\", \"roleId\":\"角色ID\", \"roleServer\":\"兑换区服ID\", \"roleGrade\":\"角色等级\", \"sign\":\"4297f44b13955235245b2497399d7a93\" } 四、查询礼包码 4.1 请求地址 URL：/gift/codeQuery 4.2 请求参数 字段 类型 必填 说明 签名 gameId int 是 游戏编号 Y exCodeMulti string 是 礼包码，多个码使用【,】分割，数量 Y sign string 是 签名 N 3.3 请求示例 { \"gameId\":\"1015\", \"exCodeMulti\":\"CXPIYFLW,MO2F66U2\", \"sign\":\"4297f44b13955235245b2497399d7a93\" } 五、礼包发货 5.1 请求地址 URL：游戏提供道具发货接口 5.2 请求参数 字段 类型 必填 说明 签名 gameId int 是 游戏编号 Y roleId int 是 角色ID Y roleServer int 是 角色区服ID Y prop 是 礼包 Y prop.name string 是 道具名称 Y prop.num int 是 数量 Y exOrderNo string 是 兑换订单编号 Y exCode string 是 礼包码 Y channel string 是 渠道：rocgame Y extra string 否 扩展信息 Y sign string 是 签名 N 5.3 请求示例 { \"gameId\":\"1015\", \"roleId\":\"角色ID\", \"roleServer\":\"角色区服ID\", \"prop\":[ { \"name\":\"道具名称\", \"num\":\"1\" }, { \"name\":\"道具名称\", \"num\":\"1\" } ], \"exOrderId\":\"兑换订单编号\", \"exCode\":\"礼包码\", \"channel\":\"rocgame\", \"extra\":\"扩展信息\", \"sign\":\"签名\" } Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/gift/best-practice.html":{"url":"modules/gift/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 礼包功能流程 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/analytics/overview.html":{"url":"modules/analytics/overview.html","title":"功能介绍","keywords":"","body":"数据功能介绍 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/analytics/best-practice.html":{"url":"modules/analytics/best-practice.html","title":"最佳实践","keywords":"","body":"最佳实践 数据分析流程 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/extension/access-android.html":{"url":"core/extension/access-android.html","title":"Android","keywords":"","body":"SDK的额外功能接口 # 1.游戏内活动页 a.是否开启活动页 接口定义： public void SDKisOpenActive (Context context, UpdateInfo updateInfo, OpenActivityListener listener) UpdateInfo 对象目前只需要传一个serverId参数 参数 类型 说明 serverId String 游戏区服ID 没有就传字符串@\"1\" listener boolean true表示开启，false表示不开启 b.示例代码 UpdateInfo updateInfo = new UpdateInfo(); updateInfo.serverId = \"19012\"; MyExternalInterface.getInstance().SDKisOpenActive(MainActivity.this, updateInfo, new OpenActivityListener() { @Override public void onSuccess(boolean msg) { boolean isOpen = msg; BaseSDKUtils.logD(TAG, \"isOpen==\" + isOpen); } }); 2.调用活动页 接口定义： public void SDKWebPay (Activity activity,UpdateInfo updateInfo) UpdateInfo对象说明 参数名 类型 参数说明 uid String 登陆成功时返回的UID serverId String 游戏区服ID 没有就传字符串\"1\" roleId String 游戏内的角色id actionType String 活动页类型 a.示例代码 UpdateInfo updataInfo = new UpdateInfo(); updataInfo.uid = \"1000393\"; updataInfo.serverId = \"1\"; updataInfo.roleId = \"5715379823933652993\"; updataInfo.actionType = \"1\"; MyExternalInterface.getInstance().SDKWebPay(this,updataInfo); 2.应用内评论 a.接口定义：Google评论对象初始化 public void SDKPreRate(Context context, SDKInterfaceInitListener listener) listener：Google评论对象初始化回调,成功之后再调用评论方法 b.接口定义：调用评论 public void SDKGoogleRate(Activity activity, Map parMaps) parMaps：埋点数据集合 参数 类型 说明 uid String 登陆成功时返回的UID serverid String 游戏区服ID 没有就传字符串\"1\" playerid String 游戏内角色ID a.示例代码 MyExternalInterface.getInstance().SDKPreRate(this, new SDKInterfaceInitListener() { @Override public void initSuccess(String result) { Log.d(TAG, \"SDKPreRate===\" + result); toGoogleRate(); } @Override public void initFail(String result) { Log.d(TAG, \"SDKPreRate=\" + result); } }); public void toGoogleRate() { Map params = new HashMap<>(); params.put(\"uid\",\"1000393\"); params.put(\"serverid\",\"1\"); params.put(\"playerid\",\"d476b70c-961d-47cc-a62c-983b1a4ae2c0\"); MyExternalInterface.getInstance().SDKGoogleRate(this, params); 3.悬浮窗功能 通常进入到游戏后调用 1.开启悬浮窗 public void SDKShowFloat(Activity activity, WebInfo webInfo, SDKFloatListener listener) webInfo ：链接对象，目前只有link，表示要跳转的链接 listener：点击了客服按钮 参数 类型 说明 link String 跳转地址 我们运营提供 a.示例代码 WebInfo webInfo=new WebInfo(); webInfo.link=\"https://yeehagames.com/\"; MyExternalInterface.getInstance().SDKShowFloat(MainActivity.this,webInfo,new SDKFloatListener() { @Override public void onClick() { ToastUtils.showToast(MainActivity.this,\"点击了客服logo\"); } }); } 2.玩家游戏数据交互接口 通常进入到游戏后调用 public void SDKAIHelperUpData(Context context,String userJson) 接口参数Json串 userJson 字段说明: 参数 类型 说明 uid String 登陆成功时返回的UID playerid String 游戏角色ID playerName String 游戏角色名 (没有就传空符串@\"\"） pay_total String 玩家累充金额 (未充值传@\"0\") (⚠️传 美金) serverid String 游戏区服ID (没有就传字符串@\"1\" level String 游戏角色等级 (没有就传空符串@\"\"） a.示例代码 MyExternalInterface.getInstance().SDKAIHelperUpData(MainActivity.this,userJson); 3.关闭悬浮窗 public void SDKFloatClose(Activity activity, WebInfo webInfo) webInfo ：链接对象，可传null a.示例代码 MyExternalInterface.getInstance().SDKFloatClose(MainActivity.this,null); 4.获取手机系统语言 接口定义： String SDKCurrentLanguage () 默认返回 英文”en” a.示例代码 String lan= MyExternalInterface.getInstance().SDKCurrentLanguage(); 5.账户绑定 接口定义： public void SDKBindEmail (Activity activity, BaseListener listener) listener :回调 onSuccess(0, \"success\") onFail(1, \"fail\") 目前不管回调什么都继续走游戏自己的逻辑 a.示例代码 MyExternalInterface.getInstance().SDKBindEmail(this, new BaseListener() { @Override public void onSuccess(int code, String msg) { Log.d(TAG, \"msg==\" + msg); } @Override public void onFail(int code, String msg) { Log.d(TAG, \"msg==\" + msg); } }); } 6.获取货币国家 接口定义： public void SDKgetCountryCode(String sku, SDKInterfacePayListener listener) sku：Google后台的商品id listener :成功回调会返回countryCode：国家币种 currencySymbol：币种符号 失败会返回默认的币种”USD”,符号 \"$\" a.示例代码 MyExternalInterface.getInstance().SDKgetCountryCode(\"Google商品id\", new SDKInterfacePayListener() { @Override public void onSuccess(String currencyCode,String currencySymbol) { Log.d(TAG, \"currencyCode=\" + currencyCode + \" currencySymbol====\" + currencySymbol); } @Override public void onFail(String currencyCode,String currencySymbol) { Log.d(TAG, \"currencyCode=\" + currencyCode + \" currencySymbol====\" + currencySymbol); } }); } Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"core/extension/access-ios.html":{"url":"core/extension/access-ios.html","title":"iOS","keywords":"","body":" [!TIP|iconVisibility:hidden|labelVisibility:hidden] SDK 接入请参照 快速开始 或 IOS登录 页面 SDK额外功能接口 请先初始化 SDK 可参考 IOS登录 功能接口可选择使用, 我们运营也可能会指定部分需求 1. 商店评分 调用时机我们运营定 接口参数对象 dic 包含字段说明: 参数 类型 说明 uid 字符串 登陆成功时返回的UID serverid 字符串 游戏区服ID 没有就传字符串@\"1\"） playerid 字符串 为游戏内角色ID channelid 字符串 固定传 @\"AS\" + (void)azlStorePRoduct:(NSDictionary *)dic; 调用示例如下: [ROCSdkManager azlStorePRoduct:@{@\"uid\":@\"xxxx\", @\"serverid\":@\"xxxx\", @\"playerid\":@\"xxxx\", @\"channel\":@\"AS\"}]; 2. Yeeha官网跳转悬浮窗 2.1 悬浮窗展示接口 通常进入到游戏后调用 接口参数对象 dic 包含字段说明: 参数 类型 说明 link 字符串 跳转地址 我们运营提供 + (void)showFloatingView:(NSDictionary *)dic; 调用示例如下: [ROCSdkManager showFloatingView:@{@\"link\":@\"https://www.baidu.com\"]; 2.2 玩家游戏数据交互接口 通常进入到游戏后调用 接口参数对象 dic 包含字段说明: 参数 类型 说明 uid 字符串 登陆成功时返回的UID playerid 字符串 游戏角色ID playerName 字符串 游戏角色名 (没有就传空符串@\"\"） pay_total 字符串 玩家累充金额 (未充值传@\"0\") (⚠️传 美金) serverid 字符串 游戏区服ID (没有就传字符串@\"1\" level 字符串 游戏角色等级 (没有就传空符串@\"\"） + (void)updatePlayerInfo:(NSDictionary *)dic; 调用示例如下: [ROCSdkManager updatePlayerInfo:@{@\"uid\":@\"001\", @\"playerid\":@\"1000000\", @\"playerName\":@\"龙傲天\", @\"pay_total\":@\"6.99\", @\"serverid\":@\"1\", @\"level\":@\"18\", }]; 3. 内嵌web活动页 3.1 是否开启活动页 接口参数对象 dic 包含字段说明: 参数 类型 说明 serverId 字符串 游戏区服ID 没有就传字符串@\"1\" + (BOOL)isShowAct:(NSDictionary *)dic; 调用示例如下: BOOL isShowAct = [ROCSdkManager isShowAct:@{@\"serverId\":@\"xxx\"}]; 3.2 活动页展示 接口参数对象 dic 包含字段说明: 参数 类型 说明 uid 字符串 登陆成功时返回的UID roleId 字符串 游戏角色ID serverId 字符串 游戏区服ID 没有就传字符串@\"1\" channel 字符串 固定传 @\"AS\" + (void)showLinkActView:(NSDictionary *)dic; 调用示例如下: [ROCSdkManager showLinkActView:@{@\"uid\":@\"xxxx\", @\"serverid\":@\"xxxx\", @\"roleId\":@\"xxxx\", @\"channel\":@\"AS\"}]; 4. 绑定相关接口 4.1 邮箱绑定接口 绑定失败SDK已做处理 回调参数说明: 参数 类型 说明 type 字符串 0:界面关闭事件 1:绑定成功 + (void)showEmailBindView:(nullable void (^)(int type))complete; 调用示例如下: [ROCSdkManager showEmailBindView:^(int type) { switch (type) { case 0:{ NSLog(@\"界面已关闭\"); }break; case 1:{ NSLog(@\"绑定成功\"); }break; default:break; } }]; 4.2 Facebook绑定接口 绑定失败SDK已做处理 接口定义: + (void)bindFacebook:(void (^)(void))success cancle:(nullable void (^)(void))cancle error:(nullable void (^)(void))error; 调用示例如下: [ROCSdkManager bindFacebook:^{ NSLog(@\"成功\"); } cancle:^{ NSLog(@\"取消\"); } error:^{ NSLog(@\"出错\"); }]; 5. 多币种相关 建议做多币种时使用该接口，以保证商店显示币种同拉起显示币种相同 通常在初始化完成SDK之后 获取一次，以读取相应币种的档位表来做游戏内的商品价格显示 接口参数说明: 参数 类型 说明 productId 字符串 传入任意该app的苹果内购ID block 回调函数 - 回调参数说明: 参数 类型 说明 currency 字符串 币种 如:CNY、USD、TWD currencySymbol 字符串 货币符号 如:¥、$、NT$ + (void)getCurrency:(NSString *)productId block:(nonnull void (^)(NSString *_Nonnull currency, NSString *_Nonnull currencySymbol))block; 调用示例如下: [ROCSdkManager getCurrency:@\"xxxxxx\" block:^(NSString * _Nonnull currency, NSString * _Nonnull currencySymbol) { NSLog(@\"货币符号:%@ 币种:%@\",currencySymbol, currency); }]; 6. 内置web页 接口参数对象 dic 包含字段说明: 参数 类型 说明 link 字符串 web链接 + (void)showWebWindow:(NSDictionary *)dic; 调用示例如下: [ROCSdkManager showWebWindow:@{@\"link\":@\"https://www.baidu.com\"}]; 7. 拍脸图游戏端参数获取 可以传多组数据对应多张脸图 图片大小要统一 目前是1500x800 可以跳转的图片上的按钮不要求摆放的位置，点击整张图片等于点击了按钮 表现效果 比如有2张: A先弹出来 点了右上角的× A关闭，B弹出来 点了右上角的× B关闭，整个拍脸系统关闭 （图片需要下载 在未显示的时候会有一个底图显示 写着 【稍等正在加载】） 接口返回数组中元素对象 dic 包含字段说明: jumpJudge字段 =0时，填入一级界面名称需要和策划商量，不能填二级三级界面名称或者某个单独按钮点击后的界面 jumpPath字段 空字符串代表点击图片没反应不跳转任何界面 返回参数 类型 必要参数 说明 faceDrawingId 字符串 是 脸图id order 字符串 是 脸图顺序 path 字符串 是 图片链接（需要展示在界面上的图片） jumpJudge 字符串 是 跳转判断 0=游戏界面 1=网址 jumpPath 字符串 是 跳转路径 （可为空字符串） startTime 字符串 否 开始时间 endTime 字符串 否 结束时间 levelUpLimit 字符串 否 等级上限 levelDownLimit 字符串 否 等级下限 chargeUpLimit 字符串 否 充值额度上限 chargeDownLimit 字符串 否 充值额度下限 platformId 字符串 否 平台 0=iOS 1=安卓 serverId 字符串 否 区服Id 如:20001 + (NSArray *)getFaceDrawingInfo; 调用示例如下: NSArray *arr = [ROCSdkManager getFaceDrawingInfo]; NSDictionary *dic = arr[0]; Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/1.html":{"url":"modules/other/1.html","title":"游戏好友","keywords":"","body":"即将推出 1 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/2.html":{"url":"modules/other/2.html","title":"成就系统","keywords":"","body":"即将推出 2 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/3.html":{"url":"modules/other/3.html","title":"实时语音","keywords":"","body":"即将推出 3 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/4.html":{"url":"modules/other/4.html","title":"即时通信","keywords":"","body":"即将推出 4 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/5.html":{"url":"modules/other/5.html","title":"推送通知","keywords":"","body":"即将推出 5 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/6.html":{"url":"modules/other/6.html","title":"数据存储","keywords":"","body":"即将推出 6 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/platform/firebase-api.html":{"url":"modules/platform/firebase-api.html","title":"API","keywords":"","body":"SDK功能API接口 table{ margin: initial; } 一、文档说明 1.1 修订记录 日期 修订内容 说明 2022-02-06 v1.0.0 版本文档完成 二、报文格式 请求方式: POST 编码格式: application/json 响应结构: JSON 2.1 请求地址 key value 说明 URL http://m-uat.roc.games/api 2.2 接口响应说明 2.2.1 成功 { \"success\": true, \"errCode\": 0, \"errMsg\": \"SUCCESS\", \"data\":{} } 2.2.2 失败 { \"success\": false, \"data\": {}, \"errCode\": \"-100001\", \"errMsg\": \"Validation errors\" } 2.3 签名机制 2.3.1 概述 系统使用AWS4签名方式，参考既往接口即可。 三、拍脸图配置 3.1 请求地址 URL：/platform/syncFace 3.2 说明 可以传多组数据对应多张脸图 图片大小要统一 目前是1500x800 可以跳转的图片上的按钮不要求摆放的位置，点击整张图片等于点击了按钮 表现效果 比如有2张: A先弹出来 点了右上角的× A关闭，B弹出来 点了右上角的× B关闭，整个拍脸系统关闭 （图片需要下载 在未显示的时候会有一个底图显示 写着 【稍等正在加载】） 3.3 请求参数 字段 类型 必填 说明 gameId int 是 游戏编号 language int 是 英文en_US 繁体zh_HK 泰文th_TH data 是 脸图数组 - faceDrawingId string 是 脸图ID - order string 是 脸图顺序 - path string 是 图片链接（需要展示在界面上的图片） - jumpJudge string 是 跳转判断 0=游戏界面 1=网址 - jumpPath string 是 图片链接（需要展示在界面上的图片） - startTime string 否 开始时间戳 - endTime string 否 结束时间戳 - levelUpLimit string 否 等级上限 - levelDownLimit string 否 等级下限 - chargeUpLimit string 否 充值额度上限 - chargeDownLimit string 否 充值额度下限 - platformId string 否 平台 0=IOS 1=安卓 - serverId string 否 区服Id 如:20001 四、悬浮窗配置 4.1 请求地址 URL：/platform/syncLayer 4.2 请求参数 字段 类型 必填 说明 gameId int 是 游戏编号 language int 是 英文en_US 繁体zh_HK 泰文th_TH roleImgUrl string 是 角色素材地址 bgImgUrl string 是 背景素材地址 faq 是 - imgUrl string 是 faq素材地址 - link string 是 跳转地址 btn 是 - title string 是 标题 - imgUrl string 是 素材地址 - link string 是 跳转地址 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"faq/faq.html":{"url":"faq/faq.html","title":"接入问题","keywords":"","body":"常见问题 接入问题 ... Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"faq/faq-and.html":{"url":"faq/faq-and.html","title":"Android","keywords":"","body":"常见问题 1.弹出这个支付错误信息 ：The BillingClient is not ready,code=3: In-app billing API version 3 is not supported on this device.. 1.确保手机上有原生Google三套件，建议用海外的自带Google3件套的手机测试 2.保证手机上登录Google账号不能是中国地区的，不能在中国地区内登录过，而且测试手机上必须只登录一个测试的Google账号，没有其他的Google账号 3.设置-应用-找到Google商店,清除数据 同样的，找到对应游戏的应用，把游戏的数据也都清除掉 4.开启vpn，在手机账号管理界面只登录测试的Google账号，其他Google账号都退出 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"faq/faq-ios.html":{"url":"faq/faq-ios.html","title":"使用问题","keywords":"","body":"常见问题 使用问题 ... Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/7.html":{"url":"modules/other/7.html","title":"排行榜","keywords":"","body":"即将推出 7 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/8.html":{"url":"modules/other/8.html","title":"云存档","keywords":"","body":"即将推出 8 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "},"modules/other/9.html":{"url":"modules/other/9.html","title":"防沉迷","keywords":"","body":"即将推出 9 Copyright © ROC Games 2022            此页面修订于： 2023-03-28 15:59:20 "}}